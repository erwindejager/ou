<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>

// constants and variable related to number of floors
const int N = 1;         // # floors
typedef int[0,N-1] id_f; // floor id from 0 to N-1


// constants and variable related to number of elevators
const int ELEVATORS = 2; // # elevators
typedef int[0,ELEVATORS-1] id_e; //  id from 0 to ELEVATORS-1


// cabin door channels and constants
chan open_door[id_e], close_door[id_e], door_open[id_e], door_closed[id_e]; // channels for a door
const int door_time = 2;     // time to open or close the door



// protecting door channels and constants
chan open_pdoor[id_e][id_f], close_pdoor[id_e][id_f], pdoor_open[id_e][id_f], pdoor_closed[id_e][id_f]; // channels for a door

// engine channels
chan stop[id_e], move_down[id_e], move_up[id_e];


// floor sensors channels and constants
const int floor_time = 1; // time to travel one floor
chan start_sensors[id_e],stop_sensors[id_e],reach_floor[id_e];


// button channels
chan req[id_e][id_f];

// communications between RequestHandler and MainControl
chan go[id_e], served[id_e];

// Place global declarations here.

// The current floor of the elevator:
id_f current_floor[id_e];

void init_current_floor (id_e e) {
	current_floor[e] = 0; 
} 

void init_system (id_e e) {
	init_current_floor(e);
} 

// communications between system_start and button
chan system_start_evt[id_e];

// The floor to which the main control is requested to go to.
// This variable is just used for communication between the request handler and the main control.
// Therefore, we can declare it meta (i.e., not part of the state).
meta id_f target_floor[id_e];</declaration><template><name>button</name><parameter>id_e e</parameter><declaration>clock x;</declaration><location id="id0" x="-312" y="-8"></location><location id="id1" x="-32" y="-8"></location><init ref="id0"/><transition><source ref="id0"/><target ref="id1"/><label kind="synchronisation" x="-224" y="-32">system_start_evt[e]?</label><label kind="comments">Wait until initialization is ready</label></transition><transition><source ref="id1"/><target ref="id1"/><label kind="select" x="-36" y="-145">i : id_f</label><label kind="guard" x="-36" y="-129">x &gt;=1</label><label kind="synchronisation" x="-40" y="-112">req[e][i]!</label><label kind="assignment" x="-36" y="-97">x=0</label><nail x="-52" y="-81"/><nail x="12" y="-81"/></transition></template><template><name>FIFO_RequestHandler</name><declaration>// The dummy request handler gets requests from the button.
// When these are received, they are stored in the following local variable.
id_f current_req;

// Before beginning with the assignment, you should take some time understand how a request is send from the button to the dummy request handler.
// This communication uses a parametrized channel "req". Basically, for each floor i there is a channel req[i].
// Another way of providing communication makes use of global variables.
// An example is the way the request handler sends a go signal to the main control.
// A global variable is used (target_floor, see "Declarations" of the project). When sending a go, the request handler puts a value into this global variable.
// When receiving a go, the main control takes this value and immediately sets it to zero. In UPPAAL, this is a very efficient way of encoding a synchronous communication.


// The dummy request handler can only deal with one request at a time.
// Only after the request has been served, a new request can be received.
// The first part of the task tells you how to build a FIFO request handler.
// This handler receives requests and stores them in a queue.
// The following code defines this queue.
// Size of the queue:
const int size = 5; 

// Local queue storing the requests.
id_f list[size];
int[0,size] len = 0;


// Put an element at the end of the queue
// Current allocation scheme is a FIFO
// might not be the smartest scheme but it ensures
// that all requests are served ...
// until the FIFO is full. Then it simply 
// ignores all requests. 
void enqueue(id_f element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}



// Returns the front element of the queue
id_f front()
{
   return list[0];
}

// Returns the last element of the queue
id_f last()
{
   return list[len - 1];
}

bool is_empty ()
{
	return len == 0;
}

bool is_full ()
{
	return len == size;
}</declaration><location id="id2" x="-1352" y="-808"><name x="-1456" y="-864">handle_btn_req_wait_prev_req_served</name></location><location id="id3" x="-1680" y="-808"><name x="-1728" y="-848">handle_btn_req</name></location><init ref="id3"/><transition><source ref="id2"/><target ref="id3"/><label kind="select" x="-1576" y="-853">i:id_f</label><label kind="synchronisation" x="-1560" y="-664">req[1][i]?</label><nail x="-1352" y="-680"/><nail x="-1680" y="-680"/></transition><transition><source ref="id3"/><target ref="id2"/><label kind="select" x="-1544" y="-680">i:id_f</label><label kind="synchronisation" x="-1576" y="-840">req[0][i]?</label></transition></template><template><name>system_start</name><location id="id4" x="-80" y="-88"></location><location id="id5" x="-136" y="-232"><name x="-184" y="-272">system_started</name><committed/></location><location id="id6" x="-376" y="-232"><name x="-408" y="-272">initialized</name></location><location id="id7" x="-608" y="-232"></location><init ref="id7"/><transition><source ref="id5"/><target ref="id4"/><label kind="synchronisation" x="-168" y="-175">system_start_evt[1]!</label></transition><transition><source ref="id6"/><target ref="id5"/><nail x="-272" y="-232"/></transition><transition><source ref="id6"/><target ref="id5"/><label kind="synchronisation" x="-312" y="-256">system_start_evt[0]!</label></transition><transition><source ref="id7"/><target ref="id6"/></transition></template><template><name>WS</name><declaration>clock servicTimer;</declaration><location id="id8" x="-216" y="-136"></location><location id="id9" x="-416" y="-136"></location><init ref="id9"/><transition><source ref="id9"/><target ref="id8"/></transition></template><system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system system_start, button, FIFO_RequestHandler;</system></nta>