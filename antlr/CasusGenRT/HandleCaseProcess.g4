// Automatically generated by EDJ BPEL2CFG Transformer : Fri Mar 08 15:40:09 CET 2019

grammar HandleCaseProcess;

options {language=Java;}

@header {
package casusgenrt.antlr.ou;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;

import casusgenst.ou.ParseCatchException;
import casusgenst.ou.Utils;
}

@members {
Map<String,Object> varMap = new HashMap();
Map<String,String> vMap = new HashMap();
String catchExceptionPoint = "";

public class HandleCaseProcessReq {
String id;
public String getId() { return id; }
public void setId(String s) { id = s; }
String type;
public String getType() { return type; }
public void setType(String s) { type = s; }
String errorIndicator;
public String getErrorIndicator() { return errorIndicator; }
public void setErrorIndicator(String s) { errorIndicator = s; }
}
HandleCaseProcessReq handleCaseProcessReq = new HandleCaseProcessReq();

public class HandleCaseProcessResp {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
HandleCaseProcessResp handleCaseProcessResp = new HandleCaseProcessResp();

public class StopCaseReq {
String id;
public String getId() { return id; }
public void setId(String s) { id = s; }
String errorIndicator;
public String getErrorIndicator() { return errorIndicator; }
public void setErrorIndicator(String s) { errorIndicator = s; }
}
StopCaseReq stopCaseReq = new StopCaseReq();

public class StopCaseResp {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
StopCaseResp stopCaseResp = new StopCaseResp();

public class HandleCaseFault {
String handleCaseFault;
public String getHandleCaseFault() { return handleCaseFault; }
public void setHandleCaseFault(String s) { handleCaseFault = s; }
}
HandleCaseFault handleCaseFault = new HandleCaseFault();

public class HandleObjectionReq {
String id;
public String getId() { return id; }
public void setId(String s) { id = s; }
String type;
public String getType() { return type; }
public void setType(String s) { type = s; }
String errorIndicator;
public String getErrorIndicator() { return errorIndicator; }
public void setErrorIndicator(String s) { errorIndicator = s; }
}
HandleObjectionReq handleObjectionReq = new HandleObjectionReq();

public class HandleObjectionResp {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
HandleObjectionResp handleObjectionResp = new HandleObjectionResp();

public class HandleParkedCaseReq {
String id;
public String getId() { return id; }
public void setId(String s) { id = s; }
String type;
public String getType() { return type; }
public void setType(String s) { type = s; }
String errorIndicator;
public String getErrorIndicator() { return errorIndicator; }
public void setErrorIndicator(String s) { errorIndicator = s; }
}
HandleParkedCaseReq handleParkedCaseReq = new HandleParkedCaseReq();

public class HandleParkedCaseResp {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
HandleParkedCaseResp handleParkedCaseResp = new HandleParkedCaseResp();

public class ReinjectCaseReq {
String id;
public String getId() { return id; }
public void setId(String s) { id = s; }
String type;
public String getType() { return type; }
public void setType(String s) { type = s; }
String trigger;
public String getTrigger() { return trigger; }
public void setTrigger(String s) { trigger = s; }
String exceptionPoint;
public String getExceptionPoint() { return exceptionPoint; }
public void setExceptionPoint(String s) { exceptionPoint = s; }
String errorIndicator;
public String getErrorIndicator() { return errorIndicator; }
public void setErrorIndicator(String s) { errorIndicator = s; }
}
ReinjectCaseReq reinjectCaseReq = new ReinjectCaseReq();

public class ReinjectCaseResp {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
ReinjectCaseResp reinjectCaseResp = new ReinjectCaseResp();

public class RegisterCase {
WsRegisterRequest requestInput = new WsRegisterRequest();
public WsRegisterRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRegisterRequest s) { requestInput = s; }
}
RegisterCase registerCase = new RegisterCase();

public class WsRequest {
String errorIndicator;
public String getErrorIndicator() { return errorIndicator; }
public void setErrorIndicator(String s) { errorIndicator = s; }
String id;
public String getId() { return id; }
public void setId(String s) { id = s; }
}
public class WsRegisterRequest extends WsRequest {
String type;
public String getType() { return type; }
public void setType(String s) { type = s; }
}
public class RegisterCaseResponse {
WsRegisterResponse registerCaseReturn = new WsRegisterResponse();
public WsRegisterResponse getRegisterCaseReturn() { return registerCaseReturn; }
public void setRegisterCaseReturn(WsRegisterResponse s) { registerCaseReturn = s; }
}
RegisterCaseResponse registerCaseResponse = new RegisterCaseResponse();

public class WsResponse {
}
public class WsRegisterResponse extends WsResponse {
String ticketId;
public String getTicketId() { return ticketId; }
public void setTicketId(String s) { ticketId = s; }
}
public class WsFault {
String faultCode;
public String getFaultCode() { return faultCode; }
public void setFaultCode(String s) { faultCode = s; }
String faultString;
public String getFaultString() { return faultString; }
public void setFaultString(String s) { faultString = s; }
}
public class WsException {
WsFault faultInfo = new WsFault();
public WsFault getFaultInfo() { return faultInfo; }
public void setFaultInfo(WsFault s) { faultInfo = s; }
}
public class Fault extends WsException {}
WsException fault = new WsException();
public WsException getFault() { return fault; }
public void setFault(WsException s) { fault = s; }
public class GetCalculation {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
GetCalculation getCalculation = new GetCalculation();

public class GetCalculationResponse {
WsResponse getCalculationReturn = new WsResponse();
public WsResponse getGetCalculationReturn() { return getCalculationReturn; }
public void setGetCalculationReturn(WsResponse s) { getCalculationReturn = s; }
}
GetCalculationResponse getCalculationResponse = new GetCalculationResponse();

public class CreateCase {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
CreateCase createCase = new CreateCase();

public class CreateCaseResponse {
WsResponse createCaseReturn = new WsResponse();
public WsResponse getCreateCaseReturn() { return createCaseReturn; }
public void setCreateCaseReturn(WsResponse s) { createCaseReturn = s; }
}
CreateCaseResponse createCaseResponse = new CreateCaseResponse();

public class ValidateCase {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
ValidateCase validateCase = new ValidateCase();

public class ValidateCaseResponse {
WsResponse validateCaseReturn = new WsResponse();
public WsResponse getValidateCaseReturn() { return validateCaseReturn; }
public void setValidateCaseReturn(WsResponse s) { validateCaseReturn = s; }
}
ValidateCaseResponse validateCaseResponse = new ValidateCaseResponse();

public class ParkCase {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
ParkCase parkCase = new ParkCase();

public class ParkCaseResponse {
WsResponse parkCaseReturn = new WsResponse();
public WsResponse getParkCaseReturn() { return parkCaseReturn; }
public void setParkCaseReturn(WsResponse s) { parkCaseReturn = s; }
}
ParkCaseResponse parkCaseResponse = new ParkCaseResponse();

public class StopCase {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
StopCase stopCase = new StopCase();

public class StopCaseResponse {
WsResponse stopCaseReturn = new WsResponse();
public WsResponse getStopCaseReturn() { return stopCaseReturn; }
public void setStopCaseReturn(WsResponse s) { stopCaseReturn = s; }
}
StopCaseResponse stopCaseResponse = new StopCaseResponse();

public class CreatePayment {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
CreatePayment createPayment = new CreatePayment();

public class CreatePaymentResponse {
WsResponse createPaymentReturn = new WsResponse();
public WsResponse getCreatePaymentReturn() { return createPaymentReturn; }
public void setCreatePaymentReturn(WsResponse s) { createPaymentReturn = s; }
}
CreatePaymentResponse createPaymentResponse = new CreatePaymentResponse();

public class SendLetter {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
SendLetter sendLetter = new SendLetter();

public class SendLetterResponse {
WsResponse sendLetterReturn = new WsResponse();
public WsResponse getSendLetterReturn() { return sendLetterReturn; }
public void setSendLetterReturn(WsResponse s) { sendLetterReturn = s; }
}
SendLetterResponse sendLetterResponse = new SendLetterResponse();

public class EndCase {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
EndCase endCase = new EndCase();

public class EndCaseResponse {
WsResponse endCaseReturn = new WsResponse();
public WsResponse getEndCaseReturn() { return endCaseReturn; }
public void setEndCaseReturn(WsResponse s) { endCaseReturn = s; }
}
EndCaseResponse endCaseResponse = new EndCaseResponse();

public class CreateObjectionCase {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
CreateObjectionCase createObjectionCase = new CreateObjectionCase();

public class CreateObjectionCaseResponse {
WsResponse createObjectionCaseReturn = new WsResponse();
public WsResponse getCreateObjectionCaseReturn() { return createObjectionCaseReturn; }
public void setCreateObjectionCaseReturn(WsResponse s) { createObjectionCaseReturn = s; }
}
CreateObjectionCaseResponse createObjectionCaseResponse = new CreateObjectionCaseResponse();

public class CheckProcessability {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
CheckProcessability checkProcessability = new CheckProcessability();

public class CheckProcessabilityResponse {
WsResponse checkProcessabilityReturn = new WsResponse();
public WsResponse getCheckProcessabilityReturn() { return checkProcessabilityReturn; }
public void setCheckProcessabilityReturn(WsResponse s) { checkProcessabilityReturn = s; }
}
CheckProcessabilityResponse checkProcessabilityResponse = new CheckProcessabilityResponse();

public class CreateExceptionTask {
WsExceptionTaskRequest requestInput = new WsExceptionTaskRequest();
public WsExceptionTaskRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsExceptionTaskRequest s) { requestInput = s; }
}
CreateExceptionTask createExceptionTask = new CreateExceptionTask();

public class WsExceptionTaskRequest {
String exceptionPoint;
public String getExceptionPoint() { return exceptionPoint; }
public void setExceptionPoint(String s) { exceptionPoint = s; }
String id;
public String getId() { return id; }
public void setId(String s) { id = s; }
String triggerEvent;
public String getTriggerEvent() { return triggerEvent; }
public void setTriggerEvent(String s) { triggerEvent = s; }
}
public class CreateExceptionTaskResponse {
WsResponse createExceptionTaskReturn = new WsResponse();
public WsResponse getCreateExceptionTaskReturn() { return createExceptionTaskReturn; }
public void setCreateExceptionTaskReturn(WsResponse s) { createExceptionTaskReturn = s; }
}
CreateExceptionTaskResponse createExceptionTaskResponse = new CreateExceptionTaskResponse();

public class ValidateObjectionCase {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
ValidateObjectionCase validateObjectionCase = new ValidateObjectionCase();

public class ValidateObjectionCaseResponse {
WsResponse validateObjectionCaseReturn = new WsResponse();
public WsResponse getValidateObjectionCaseReturn() { return validateObjectionCaseReturn; }
public void setValidateObjectionCaseReturn(WsResponse s) { validateObjectionCaseReturn = s; }
}
ValidateObjectionCaseResponse validateObjectionCaseResponse = new ValidateObjectionCaseResponse();

public class CreateObjectionTask {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
CreateObjectionTask createObjectionTask = new CreateObjectionTask();

public class CreateObjectionTaskResponse {
WsResponse createObjectionTaskReturn = new WsResponse();
public WsResponse getCreateObjectionTaskReturn() { return createObjectionTaskReturn; }
public void setCreateObjectionTaskReturn(WsResponse s) { createObjectionTaskReturn = s; }
}
CreateObjectionTaskResponse createObjectionTaskResponse = new CreateObjectionTaskResponse();

public class RegisterObjectionCase {
WsRegisterRequest requestInput = new WsRegisterRequest();
public WsRegisterRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRegisterRequest s) { requestInput = s; }
}
RegisterObjectionCase registerObjectionCase = new RegisterObjectionCase();

public class RegisterObjectionCaseResponse {
WsRegisterResponse registerObjectionCaseReturn = new WsRegisterResponse();
public WsRegisterResponse getRegisterObjectionCaseReturn() { return registerObjectionCaseReturn; }
public void setRegisterObjectionCaseReturn(WsRegisterResponse s) { registerObjectionCaseReturn = s; }
}
RegisterObjectionCaseResponse registerObjectionCaseResponse = new RegisterObjectionCaseResponse();

public class HandleCaseProcessReq_ {
HandleCaseProcessReq payload = new HandleCaseProcessReq();
public HandleCaseProcessReq getPayload() { return payload; }
}
HandleCaseProcessReq_ handleCaseProcessReq_ = new HandleCaseProcessReq_();

public class HandleCaseProcessResp_ {
HandleCaseProcessResp payload = new HandleCaseProcessResp();
public HandleCaseProcessResp getPayload() { return payload; }
}
HandleCaseProcessResp_ handleCaseProcessResp_ = new HandleCaseProcessResp_();

public class StopCaseReq_ {
StopCaseReq parameters = new StopCaseReq();
public StopCaseReq getParameters() { return parameters; }
}
StopCaseReq_ stopCaseReq_ = new StopCaseReq_();

public class StopCaseResp_ {
StopCaseResp parameters = new StopCaseResp();
public StopCaseResp getParameters() { return parameters; }
}
StopCaseResp_ stopCaseResp_ = new StopCaseResp_();

public class HandleCaseFault_ {
}
HandleCaseFault_ handleCaseFault_ = new HandleCaseFault_();

public class HandleObjectionReq_ {
HandleObjectionReq parameters = new HandleObjectionReq();
public HandleObjectionReq getParameters() { return parameters; }
}
HandleObjectionReq_ handleObjectionReq_ = new HandleObjectionReq_();

public class HandleObjectionResp_ {
HandleObjectionResp parameters = new HandleObjectionResp();
public HandleObjectionResp getParameters() { return parameters; }
}
HandleObjectionResp_ handleObjectionResp_ = new HandleObjectionResp_();

public class HandleParkedCaseReq_ {
HandleParkedCaseReq parameters = new HandleParkedCaseReq();
public HandleParkedCaseReq getParameters() { return parameters; }
}
HandleParkedCaseReq_ handleParkedCaseReq_ = new HandleParkedCaseReq_();

public class HandleParkedCaseResp_ {
HandleParkedCaseResp parameters = new HandleParkedCaseResp();
public HandleParkedCaseResp getParameters() { return parameters; }
}
HandleParkedCaseResp_ handleParkedCaseResp_ = new HandleParkedCaseResp_();

public class ReinjectCaseReq_ {
ReinjectCaseReq parameters = new ReinjectCaseReq();
public ReinjectCaseReq getParameters() { return parameters; }
}
ReinjectCaseReq_ reinjectCaseReq_ = new ReinjectCaseReq_();

public class ReinjectCaseResp_ {
ReinjectCaseResp parameters = new ReinjectCaseResp();
public ReinjectCaseResp getParameters() { return parameters; }
}
ReinjectCaseResp_ reinjectCaseResp_ = new ReinjectCaseResp_();

public class RegisterCaseRequest_ {
RegisterCase parameters = new RegisterCase();
public RegisterCase getParameters() { return parameters; }
}
RegisterCaseRequest_ registerCaseRequest_ = new RegisterCaseRequest_();

public class ParkCaseRequest_ {
ParkCase parameters = new ParkCase();
public ParkCase getParameters() { return parameters; }
}
ParkCaseRequest_ parkCaseRequest_ = new ParkCaseRequest_();

public class CreateCaseRequest_ {
CreateCase parameters = new CreateCase();
public CreateCase getParameters() { return parameters; }
}
CreateCaseRequest_ createCaseRequest_ = new CreateCaseRequest_();

public class EndCaseRequest_ {
EndCase parameters = new EndCase();
public EndCase getParameters() { return parameters; }
}
EndCaseRequest_ endCaseRequest_ = new EndCaseRequest_();

public class StopCaseResponse_ {
StopCaseResponse parameters = new StopCaseResponse();
public StopCaseResponse getParameters() { return parameters; }
}
StopCaseResponse_ stopCaseResponse_ = new StopCaseResponse_();

public class SendLetterRequest_ {
SendLetter parameters = new SendLetter();
public SendLetter getParameters() { return parameters; }
}
SendLetterRequest_ sendLetterRequest_ = new SendLetterRequest_();

public class CreatePaymentResponse_ {
CreatePaymentResponse parameters = new CreatePaymentResponse();
public CreatePaymentResponse getParameters() { return parameters; }
}
CreatePaymentResponse_ createPaymentResponse_ = new CreatePaymentResponse_();

public class GetCalculationRequest_ {
GetCalculation parameters = new GetCalculation();
public GetCalculation getParameters() { return parameters; }
}
GetCalculationRequest_ getCalculationRequest_ = new GetCalculationRequest_();

public class CreateObjectionTaskRequest_ {
CreateObjectionTask parameters = new CreateObjectionTask();
public CreateObjectionTask getParameters() { return parameters; }
}
CreateObjectionTaskRequest_ createObjectionTaskRequest_ = new CreateObjectionTaskRequest_();

public class CreateObjectionTaskResponse_ {
CreateObjectionTaskResponse parameters = new CreateObjectionTaskResponse();
public CreateObjectionTaskResponse getParameters() { return parameters; }
}
CreateObjectionTaskResponse_ createObjectionTaskResponse_ = new CreateObjectionTaskResponse_();

public class EndCaseResponse_ {
EndCaseResponse parameters = new EndCaseResponse();
public EndCaseResponse getParameters() { return parameters; }
}
EndCaseResponse_ endCaseResponse_ = new EndCaseResponse_();

public class CheckProcessabilityRequest_ {
CheckProcessability parameters = new CheckProcessability();
public CheckProcessability getParameters() { return parameters; }
}
CheckProcessabilityRequest_ checkProcessabilityRequest_ = new CheckProcessabilityRequest_();

public class WsException_ {
Fault fault = new Fault();
public Fault getFault() { return fault; }
}
WsException_ wsException_ = new WsException_();

public class CreateCaseResponse_ {
CreateCaseResponse parameters = new CreateCaseResponse();
public CreateCaseResponse getParameters() { return parameters; }
}
CreateCaseResponse_ createCaseResponse_ = new CreateCaseResponse_();

public class CreateObjectionCaseRequest_ {
CreateObjectionCase parameters = new CreateObjectionCase();
public CreateObjectionCase getParameters() { return parameters; }
}
CreateObjectionCaseRequest_ createObjectionCaseRequest_ = new CreateObjectionCaseRequest_();

public class CreateObjectionCaseResponse_ {
CreateObjectionCaseResponse parameters = new CreateObjectionCaseResponse();
public CreateObjectionCaseResponse getParameters() { return parameters; }
}
CreateObjectionCaseResponse_ createObjectionCaseResponse_ = new CreateObjectionCaseResponse_();

public class ValidateCaseRequest_ {
ValidateCase parameters = new ValidateCase();
public ValidateCase getParameters() { return parameters; }
}
ValidateCaseRequest_ validateCaseRequest_ = new ValidateCaseRequest_();

public class CreatePaymentRequest_ {
CreatePayment parameters = new CreatePayment();
public CreatePayment getParameters() { return parameters; }
}
CreatePaymentRequest_ createPaymentRequest_ = new CreatePaymentRequest_();

public class StopCaseRequest_ {
StopCase parameters = new StopCase();
public StopCase getParameters() { return parameters; }
}
StopCaseRequest_ stopCaseRequest_ = new StopCaseRequest_();

public class CheckProcessabilityResponse_ {
CheckProcessabilityResponse parameters = new CheckProcessabilityResponse();
public CheckProcessabilityResponse getParameters() { return parameters; }
}
CheckProcessabilityResponse_ checkProcessabilityResponse_ = new CheckProcessabilityResponse_();

public class RegisterObjectionCaseResponse_ {
RegisterObjectionCaseResponse parameters = new RegisterObjectionCaseResponse();
public RegisterObjectionCaseResponse getParameters() { return parameters; }
}
RegisterObjectionCaseResponse_ registerObjectionCaseResponse_ = new RegisterObjectionCaseResponse_();

public class GetCalculationResponse_ {
GetCalculationResponse parameters = new GetCalculationResponse();
public GetCalculationResponse getParameters() { return parameters; }
}
GetCalculationResponse_ getCalculationResponse_ = new GetCalculationResponse_();

public class CreateExceptionTaskResponse_ {
CreateExceptionTaskResponse parameters = new CreateExceptionTaskResponse();
public CreateExceptionTaskResponse getParameters() { return parameters; }
}
CreateExceptionTaskResponse_ createExceptionTaskResponse_ = new CreateExceptionTaskResponse_();

public class RegisterCaseResponse_ {
RegisterCaseResponse parameters = new RegisterCaseResponse();
public RegisterCaseResponse getParameters() { return parameters; }
}
RegisterCaseResponse_ registerCaseResponse_ = new RegisterCaseResponse_();

public class CreateExceptionTaskRequest_ {
CreateExceptionTask parameters = new CreateExceptionTask();
public CreateExceptionTask getParameters() { return parameters; }
}
CreateExceptionTaskRequest_ createExceptionTaskRequest_ = new CreateExceptionTaskRequest_();

public class ValidateObjectionCaseRequest_ {
ValidateObjectionCase parameters = new ValidateObjectionCase();
public ValidateObjectionCase getParameters() { return parameters; }
}
ValidateObjectionCaseRequest_ validateObjectionCaseRequest_ = new ValidateObjectionCaseRequest_();

public class SendLetterResponse_ {
SendLetterResponse parameters = new SendLetterResponse();
public SendLetterResponse getParameters() { return parameters; }
}
SendLetterResponse_ sendLetterResponse_ = new SendLetterResponse_();

public class ParkCaseResponse_ {
ParkCaseResponse parameters = new ParkCaseResponse();
public ParkCaseResponse getParameters() { return parameters; }
}
ParkCaseResponse_ parkCaseResponse_ = new ParkCaseResponse_();

public class RegisterObjectionCaseRequest_ {
RegisterObjectionCase parameters = new RegisterObjectionCase();
public RegisterObjectionCase getParameters() { return parameters; }
}
RegisterObjectionCaseRequest_ registerObjectionCaseRequest_ = new RegisterObjectionCaseRequest_();

public class ValidateCaseResponse_ {
ValidateCaseResponse parameters = new ValidateCaseResponse();
public ValidateCaseResponse getParameters() { return parameters; }
}
ValidateCaseResponse_ validateCaseResponse_ = new ValidateCaseResponse_();

public class ValidateObjectionCaseResponse_ {
ValidateObjectionCaseResponse parameters = new ValidateObjectionCaseResponse();
public ValidateObjectionCaseResponse getParameters() { return parameters; }
}
ValidateObjectionCaseResponse_ validateObjectionCaseResponse_ = new ValidateObjectionCaseResponse_();

HandleCaseProcessReq_ handleCaseInput = handleCaseProcessReq_;
HandleCaseProcessResp_ handleCaseOutput = handleCaseProcessResp_;
RegisterCaseResponse_ registerCaseReply = registerCaseResponse_;
RegisterCaseRequest_ registerCaseRequest = registerCaseRequest_;
CreateCaseResponse_ createCaseReply = createCaseResponse_;
CreateCaseRequest_ createCaseRequest = createCaseRequest_;
String ticket;
ValidateCaseResponse_ validateCaseReply = validateCaseResponse_;
ValidateCaseRequest_ validateCaseRequest = validateCaseRequest_;
ParkCaseResponse_ parkCaseReply = parkCaseResponse_;
ParkCaseRequest_ parkCaseRequest = parkCaseRequest_;
StopCaseReq_ stopCaseInput = stopCaseReq_;
StopCaseResp_ stopCaseOutput = stopCaseResp_;
StopCaseResponse_ stopCaseReply = stopCaseResponse_;
StopCaseRequest_ stopCaseRequest = stopCaseRequest_;
WsException_ exception = wsException_;
HandleObjectionReq_ handleObjectionInput = handleObjectionReq_;
HandleObjectionResp_ handleObjectionOutput = handleObjectionResp_;
RegisterObjectionCaseResponse_ registerObjectionCaseReply = registerObjectionCaseResponse_;
RegisterObjectionCaseRequest_ registerObjectionCaseRequest = registerObjectionCaseRequest_;
CreateObjectionCaseResponse_ createObjectionCaseReply = createObjectionCaseResponse_;
CreateObjectionCaseRequest_ createObjectionCaseRequest = createObjectionCaseRequest_;
ValidateObjectionCaseResponse_ validateObjectionCaseReply = validateObjectionCaseResponse_;
ValidateObjectionCaseRequest_ validateObjectionCaseRequest = validateObjectionCaseRequest_;
CreateObjectionTaskResponse_ createObjectionTaskReply = createObjectionTaskResponse_;
CreateObjectionTaskRequest_ createObjectionTaskRequest = createObjectionTaskRequest_;
HandleParkedCaseReq_ handleParkedCaseInput = handleParkedCaseReq_;
HandleParkedCaseResp_ handleParkedCaseOutput = handleParkedCaseResp_;
ReinjectCaseReq_ reinjectCaseInput = reinjectCaseReq_;
ReinjectCaseResp_ reinjectCaseOutput = reinjectCaseResp_;
String caseId;
String caseType;
String errorIndicator;
String caseHandlingTrigger;
String caseExceptionPoint;
String noreinjection;
GetCalculationResponse_ getCalculationReply = getCalculationResponse_;
GetCalculationRequest_ getCalculationRequest = getCalculationRequest_;
CheckProcessabilityResponse_ checkProcessabilityReply = checkProcessabilityResponse_;
CreatePaymentResponse_ createPaymentReply = createPaymentResponse_;
CreatePaymentRequest_ createPaymentRequest = createPaymentRequest_;
SendLetterResponse_ sendLetterReply = sendLetterResponse_;
SendLetterRequest_ sendLetterRequest = sendLetterRequest_;
EndCaseResponse_ endCaseReply = endCaseResponse_;
EndCaseRequest_ endCaseRequest = endCaseRequest_;
CheckProcessabilityRequest_ checkProcessabilityRequest = checkProcessabilityRequest_;
CreateExceptionTaskResponse_ createExceptionTaskReply = createExceptionTaskResponse_;
CreateExceptionTaskRequest_ createExceptionTaskRequest = createExceptionTaskRequest_;
String valueOk;

}

handlecaseprocess :
{
JXPathContext handleCaseInputCtx = JXPathContext.newContext(handleCaseInput);
varMap.put("handleCaseInput", handleCaseInputCtx);
JXPathContext handleCaseOutputCtx = JXPathContext.newContext(handleCaseOutput);
varMap.put("handleCaseOutput", handleCaseOutputCtx);
JXPathContext registerCaseReplyCtx = JXPathContext.newContext(registerCaseReply);
varMap.put("registerCaseReply", registerCaseReplyCtx);
JXPathContext registerCaseRequestCtx = JXPathContext.newContext(registerCaseRequest);
varMap.put("registerCaseRequest", registerCaseRequestCtx);
JXPathContext createCaseReplyCtx = JXPathContext.newContext(createCaseReply);
varMap.put("createCaseReply", createCaseReplyCtx);
JXPathContext createCaseRequestCtx = JXPathContext.newContext(createCaseRequest);
varMap.put("createCaseRequest", createCaseRequestCtx);
JXPathContext ticketCtx = JXPathContext.newContext(ticket);
varMap.put("ticket", ticketCtx);
JXPathContext validateCaseReplyCtx = JXPathContext.newContext(validateCaseReply);
varMap.put("validateCaseReply", validateCaseReplyCtx);
JXPathContext validateCaseRequestCtx = JXPathContext.newContext(validateCaseRequest);
varMap.put("validateCaseRequest", validateCaseRequestCtx);
JXPathContext parkCaseReplyCtx = JXPathContext.newContext(parkCaseReply);
varMap.put("parkCaseReply", parkCaseReplyCtx);
JXPathContext parkCaseRequestCtx = JXPathContext.newContext(parkCaseRequest);
varMap.put("parkCaseRequest", parkCaseRequestCtx);
JXPathContext stopCaseInputCtx = JXPathContext.newContext(stopCaseInput);
varMap.put("stopCaseInput", stopCaseInputCtx);
JXPathContext stopCaseOutputCtx = JXPathContext.newContext(stopCaseOutput);
varMap.put("stopCaseOutput", stopCaseOutputCtx);
JXPathContext stopCaseReplyCtx = JXPathContext.newContext(stopCaseReply);
varMap.put("stopCaseReply", stopCaseReplyCtx);
JXPathContext stopCaseRequestCtx = JXPathContext.newContext(stopCaseRequest);
varMap.put("stopCaseRequest", stopCaseRequestCtx);
JXPathContext exceptionCtx = JXPathContext.newContext(exception);
varMap.put("exception", exceptionCtx);
JXPathContext handleObjectionInputCtx = JXPathContext.newContext(handleObjectionInput);
varMap.put("handleObjectionInput", handleObjectionInputCtx);
JXPathContext handleObjectionOutputCtx = JXPathContext.newContext(handleObjectionOutput);
varMap.put("handleObjectionOutput", handleObjectionOutputCtx);
JXPathContext registerObjectionCaseReplyCtx = JXPathContext.newContext(registerObjectionCaseReply);
varMap.put("registerObjectionCaseReply", registerObjectionCaseReplyCtx);
JXPathContext registerObjectionCaseRequestCtx = JXPathContext.newContext(registerObjectionCaseRequest);
varMap.put("registerObjectionCaseRequest", registerObjectionCaseRequestCtx);
JXPathContext createObjectionCaseReplyCtx = JXPathContext.newContext(createObjectionCaseReply);
varMap.put("createObjectionCaseReply", createObjectionCaseReplyCtx);
JXPathContext createObjectionCaseRequestCtx = JXPathContext.newContext(createObjectionCaseRequest);
varMap.put("createObjectionCaseRequest", createObjectionCaseRequestCtx);
JXPathContext validateObjectionCaseReplyCtx = JXPathContext.newContext(validateObjectionCaseReply);
varMap.put("validateObjectionCaseReply", validateObjectionCaseReplyCtx);
JXPathContext validateObjectionCaseRequestCtx = JXPathContext.newContext(validateObjectionCaseRequest);
varMap.put("validateObjectionCaseRequest", validateObjectionCaseRequestCtx);
JXPathContext createObjectionTaskReplyCtx = JXPathContext.newContext(createObjectionTaskReply);
varMap.put("createObjectionTaskReply", createObjectionTaskReplyCtx);
JXPathContext createObjectionTaskRequestCtx = JXPathContext.newContext(createObjectionTaskRequest);
varMap.put("createObjectionTaskRequest", createObjectionTaskRequestCtx);
JXPathContext handleParkedCaseInputCtx = JXPathContext.newContext(handleParkedCaseInput);
varMap.put("handleParkedCaseInput", handleParkedCaseInputCtx);
JXPathContext handleParkedCaseOutputCtx = JXPathContext.newContext(handleParkedCaseOutput);
varMap.put("handleParkedCaseOutput", handleParkedCaseOutputCtx);
JXPathContext reinjectCaseInputCtx = JXPathContext.newContext(reinjectCaseInput);
varMap.put("reinjectCaseInput", reinjectCaseInputCtx);
JXPathContext reinjectCaseOutputCtx = JXPathContext.newContext(reinjectCaseOutput);
varMap.put("reinjectCaseOutput", reinjectCaseOutputCtx);
JXPathContext caseIdCtx = JXPathContext.newContext(caseId);
varMap.put("caseId", caseIdCtx);
JXPathContext caseTypeCtx = JXPathContext.newContext(caseType);
varMap.put("caseType", caseTypeCtx);
JXPathContext errorIndicatorCtx = JXPathContext.newContext(errorIndicator);
varMap.put("errorIndicator", errorIndicatorCtx);
JXPathContext caseHandlingTriggerCtx = JXPathContext.newContext(caseHandlingTrigger);
varMap.put("caseHandlingTrigger", caseHandlingTriggerCtx);
JXPathContext caseExceptionPointCtx = JXPathContext.newContext(caseExceptionPoint);
varMap.put("caseExceptionPoint", caseExceptionPointCtx);
JXPathContext noreinjectionCtx = JXPathContext.newContext(noreinjection);
varMap.put("noreinjection", noreinjectionCtx);
JXPathContext getCalculationReplyCtx = JXPathContext.newContext(getCalculationReply);
varMap.put("getCalculationReply", getCalculationReplyCtx);
JXPathContext getCalculationRequestCtx = JXPathContext.newContext(getCalculationRequest);
varMap.put("getCalculationRequest", getCalculationRequestCtx);
JXPathContext checkProcessabilityReplyCtx = JXPathContext.newContext(checkProcessabilityReply);
varMap.put("checkProcessabilityReply", checkProcessabilityReplyCtx);
JXPathContext createPaymentReplyCtx = JXPathContext.newContext(createPaymentReply);
varMap.put("createPaymentReply", createPaymentReplyCtx);
JXPathContext createPaymentRequestCtx = JXPathContext.newContext(createPaymentRequest);
varMap.put("createPaymentRequest", createPaymentRequestCtx);
JXPathContext sendLetterReplyCtx = JXPathContext.newContext(sendLetterReply);
varMap.put("sendLetterReply", sendLetterReplyCtx);
JXPathContext sendLetterRequestCtx = JXPathContext.newContext(sendLetterRequest);
varMap.put("sendLetterRequest", sendLetterRequestCtx);
JXPathContext endCaseReplyCtx = JXPathContext.newContext(endCaseReply);
varMap.put("endCaseReply", endCaseReplyCtx);
JXPathContext endCaseRequestCtx = JXPathContext.newContext(endCaseRequest);
varMap.put("endCaseRequest", endCaseRequestCtx);
JXPathContext checkProcessabilityRequestCtx = JXPathContext.newContext(checkProcessabilityRequest);
varMap.put("checkProcessabilityRequest", checkProcessabilityRequestCtx);
JXPathContext createExceptionTaskReplyCtx = JXPathContext.newContext(createExceptionTaskReply);
varMap.put("createExceptionTaskReply", createExceptionTaskReplyCtx);
JXPathContext createExceptionTaskRequestCtx = JXPathContext.newContext(createExceptionTaskRequest);
varMap.put("createExceptionTaskRequest", createExceptionTaskRequestCtx);
JXPathContext valueOkCtx = JXPathContext.newContext(valueOk);
varMap.put("valueOk", valueOkCtx);
}

v0

'HandleRequest'

(

'InitHandleCase'
{



noreinjection = "true";
caseHandlingTrigger = "handleCase";
}

| 

'InitHandleParkedCase'
{



noreinjection = "true";
caseHandlingTrigger = "handleParkedCase";

}

| 

'InitStopCase'
{


noreinjection = "true";
caseHandlingTrigger = "stopCase";

}

| 

'InitHandleObjection'
{



noreinjection = "true";
caseHandlingTrigger = "handleObjection";
}

| 

'InitReinjectCase'
{


caseHandlingTrigger = reinjectCaseInput.parameters.trigger;


noreinjection = "false";

}
)

'HandleReceivedCaseRequest' ( { caseHandlingTrigger.equals("handleCase") }?

'PrepareInvokeRegisterCase'
{




}
'InvokeRegisterCase'
{catchExceptionPoint = "InvokeRegisterCase";}
( |

'PrepareRollback'
{


}
'StopProcess'

 exit )

'SaveTicket'
{

}

'PrepareInvokeCreateCase'
{


}
'InvokeCreateCase'
{catchExceptionPoint = "InvokeCreateCase";}
( |

'PrepareExceptionTask'
{



}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

'PrepareInvokeValidateCase'
{


}
'InvokeValidateCase'
{catchExceptionPoint = "InvokeValidateCase";}
( |

'PrepareExceptionTask'
{



}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

'PrepareInvokeParkCase'
{


}
'InvokeParkCase'
{catchExceptionPoint = "InvokeParkCase";}
( |

'PrepareExceptionTask'
{



}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

'IfNotReinjectedCase' ( { noreinjection.equals("true") }?

'PrepareReplyHandleCase'
{


}

'ReplyHandleCase'
| { !noreinjection.equals("true") }? )

| ( { caseHandlingTrigger.equals("handleParkedCase") }?

'PrepareInvokeGetCalculation'
{


}
'InvokeGetCalculation'
{catchExceptionPoint = "InvokeGetCalculation";}
( |

'PrepareExceptionTask'
{



}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

'PrepareInvokeCheckProcessability'
{

}
'InvokeCheckProcessability'
{catchExceptionPoint = "InvokeCheckProcessability";}
( |

'PrepareExceptionTask'
{



}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

'IfDegree' ( 

'PrepareInvokeCreatePayment'
{

}
'InvokeCreatePayment'
{catchExceptionPoint = "InvokeCreatePayment";}
( |

'PrepareExceptionTask'
{



}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )
| )

'PrepareInvokeSendLetter'
{

}
'InvokeSendLetter'
{catchExceptionPoint = "InvokeSendLetter";}
( |

'PrepareExceptionTask'
{



}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

'PrepareInvokeEndCase'
{

}
'InvokeEndCase'
{catchExceptionPoint = "InvokeEndCase";}
( |

'PrepareExceptionTask'
{



}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

'IfNotReinjectedParkedCase' ( { noreinjection.equals("true") }?

'PrepareReplyHandleParkedCase'
{


}

'ReplyHandleParkedCase'
| { !noreinjection.equals("true") }? )
)

| ( { caseHandlingTrigger.equals("stopCase") }?

'PrepareInvokeStopCase'
{



}
'InvokeStopCase'
{catchExceptionPoint = "InvokeStopCase";}
( |

'PrepareExceptionTask'
{



}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

'IfNotReinjectedStopCase' ( { noreinjection.equals("true") }?

'PrepareReplyStopCase'
{


}

'ReplyStopCase'
| { !noreinjection.equals("true") }? )
)

| ( { caseHandlingTrigger.equals("handleObjection") }?

'PrepareRegisterObjectionCase'
{



}
'InvokeRegisterObjectionCase'
{catchExceptionPoint = "InvokeRegisterObjectionCase";}
( |

'PrepareRollback'
{


}
'StopProcess'

 exit )

'SaveObjectionTicket'
{


}

'PrepareCreateObjectionCase'
{


}
'InvokeCreateObjectionCase'
{catchExceptionPoint = "InvokeCreateObjectionCase";}
( |

'PrepareExceptionTask'
{



}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

'PrepareInvokeValidateObjectionCase'
{


}
'InvokeValidateObjectionCase'
{catchExceptionPoint = "InvokeValidateObjectionCase";}
( |

'PrepareExceptionTask'
{



}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

'IfNewObjection' ( 

'PrepareCreateObjectionTask'
{


}
'InvokeCreateObjectionTask'
{catchExceptionPoint = "InvokeCreateObjectionTask";}
( |

'PrepareExceptionTask'
{



}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

| 

'PrepareInvokeStopObjectionCase'
{


}
'InvokeStopObjectionCase'
{catchExceptionPoint = "InvokeStopObjectionCase";}
( |

'PrepareExceptionTask'
{



}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )
)

'IfNotReinjectedObjectionCase' ( { noreinjection.equals("true") }?

'PrepareReplyHandleObjection'
{


}

'ReplyHandleObjection'
| { !noreinjection.equals("true") }? )
)
)

'Reinjected' ( { noreinjection.equals("false") }?

'PrepareReplyReinjectCase'
{


}

'ReplyReinjectCase'
| { !noreinjection.equals("false") }? )
v;

v0 : '(' kvpi (',' kvpi) + ')' ;

v :  '(' kvpo (',' kvpo) + ')'
{
};

kvpi : '<' key ',' value '>'
{
Utils.setVarValue($key.text, Utils.trimQuote($value.text), varMap);
};

kvpo : '<' key ',' value '>'
{
vMap.put($key.text, $value.text);
};

exit: v
{ throw new ParseCatchException(catchExceptionPoint,false); };
key : varname ;
value : STRING ;
index : '[' NUMBER ']' ;
varname  : (LETTERS | ALFA) (LETTERS | NUMBER | ALFA | index)* ;
LETTERS : ('a' .. 'z' | 'A' .. 'Z') + ;
NUMBER  : ('1' .. '9') + ;
ALFA : ('_' | '.') + ;
INT  : ([0-9|?])+ ;
STRING : '\'' .*? '\'';
WS  : [ \t\r\n]+ -> skip ;
