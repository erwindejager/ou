// Automatically generated by EDJ BPEL2CFG Transformer : Sun Apr 08 15:10:42 CEST 2018

grammar InvokeIncrementProcess;

options {language=Java;}

@header {
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
}

@members {
Map<String,Object> varMap = new HashMap();
Map<String,String> vMap = new HashMap();

public class InvokeIncrementProcessRequest {
String input;
public String getInput() { return input; }
public void setInput(String s) { input = s; }
}
InvokeIncrementProcessRequest invokeIncrementProcessRequest = new InvokeIncrementProcessRequest();

public class InvokeIncrementProcessResponse {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
InvokeIncrementProcessResponse invokeIncrementProcessResponse = new InvokeIncrementProcessResponse();

public class Incr {
String i;
public String getI() { return i; }
public void setI(String s) { i = s; }
}
Incr incr = new Incr();

public class IncrResponse {
String incrReturn;
public String getIncrReturn() { return incrReturn; }
public void setIncrReturn(String s) { incrReturn = s; }
}
IncrResponse incrResponse = new IncrResponse();

public class InvokeIncrementProcessRequestMessage_ {
InvokeIncrementProcessRequest payload = new InvokeIncrementProcessRequest();
public InvokeIncrementProcessRequest getPayload() { return payload; }
}
InvokeIncrementProcessRequestMessage_ invokeIncrementProcessRequestMessage_ = new InvokeIncrementProcessRequestMessage_();

public class InvokeIncrementProcessResponseMessage_ {
InvokeIncrementProcessResponse payload = new InvokeIncrementProcessResponse();
public InvokeIncrementProcessResponse getPayload() { return payload; }
}
InvokeIncrementProcessResponseMessage_ invokeIncrementProcessResponseMessage_ = new InvokeIncrementProcessResponseMessage_();

public class IncrResponse_ {
IncrResponse parameters = new IncrResponse();
public IncrResponse getParameters() { return parameters; }
}
IncrResponse_ incrResponse_ = new IncrResponse_();

public class IncrRequest_ {
Incr parameters = new Incr();
public Incr getParameters() { return parameters; }
}
IncrRequest_ incrRequest_ = new IncrRequest_();

InvokeIncrementProcessRequestMessage_ input = invokeIncrementProcessRequestMessage_;
InvokeIncrementProcessResponseMessage_ output = invokeIncrementProcessResponseMessage_;
IncrResponse_ incrementPLResponse = incrResponse_;
IncrRequest_ incrementPLRequest = incrRequest_;

}

invokeincrementprocess :
{
JXPathContext inputCtx = JXPathContext.newContext(input);
varMap.put("input", inputCtx);
JXPathContext outputCtx = JXPathContext.newContext(output);
varMap.put("output", outputCtx);
JXPathContext incrementPLResponseCtx = JXPathContext.newContext(incrementPLResponse);
varMap.put("incrementPLResponse", incrementPLResponseCtx);
JXPathContext incrementPLRequestCtx = JXPathContext.newContext(incrementPLRequest);
varMap.put("incrementPLRequest", incrementPLRequestCtx);
}

v0

'receiveInput'

'PrepareInvokeIncrement'
{
incr.i = "impl:i";

incrementPLRequest.parameters.i = input.payload.input;
}
'Invoke'


'PrepareOutput'
{
invokeIncrementProcessResponse.result = "tns:result";

output.payload.result = incrementPLResponse.parameters.incrReturn;
}

'replyOutput'
v;

v0 : '(' kvpi (',' kvpi) + ')' ;

v :  '(' kvpo (',' kvpo) + ')'
{
  if (!Utils.verify(vMap, varMap)) {
     System.out.println("ERROR: unexpected output");
  }
};

kvpi : '<' key ',' value '>'
{
Utils.setVarValue($key.text, Utils.trimQuote($value.text), varMap);
};

kvpo : '<' key ',' value '>'
{
vMap.put($key.text, $value.text);
};

key : varname ;
value : STRING ;
index : '[' NUMBER ']' ;
varname  : (LETTERS | ALFA) (LETTERS | NUMBER | ALFA | index)* ;
LETTERS : ('a' .. 'z' | 'A' .. 'Z') + ;
NUMBER  : ('1' .. '9') + ;
ALFA : ('_' | '.') + ;
INT  : ([0-9|?])+ ;
STRING : '\'' .*? '\'';
WS  : [ \t\r\n]+ -> skip ;




/*
// Automatically generated by EDJ BPEL2CFG Transformer : Thu Apr 05 17:15:44 CEST 2018

grammar InvokeIncrementProcess;

options {language=Java;}

@header {
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
}

@members {
Map<String,Object> varMap = new HashMap();
Map<String,String> vMap = new HashMap();

public class InvokeIncrementProcessRequest {
String input;
public String getInput() { return input; }
public void setInput(String s) { input = s; }
}
InvokeIncrementProcessRequest invokeIncrementProcessRequest = new InvokeIncrementProcessRequest();

public class InvokeIncrementProcessResponse {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
InvokeIncrementProcessResponse invokeIncrementProcessResponse = new InvokeIncrementProcessResponse();

public class Incr {
String i;
public String getI() { return i; }
public void setI(String s) { i = s; }
}
Incr incr = new Incr();

public class IncrResponse {
String incrReturn;
public String getIncrReturn() { return incrReturn; }
public void setIncrReturn(String s) { incrReturn = s; }
}
IncrResponse incrResponse = new IncrResponse();

public class InvokeIncrementProcessRequestMessage_ {
InvokeIncrementProcessRequest payload = new InvokeIncrementProcessRequest();
public InvokeIncrementProcessRequest getPayload() { return payload; }
}
InvokeIncrementProcessRequestMessage_ invokeIncrementProcessRequestMessage_ = new InvokeIncrementProcessRequestMessage_();

public class InvokeIncrementProcessResponseMessage_ {
InvokeIncrementProcessResponse payload = new InvokeIncrementProcessResponse();
public InvokeIncrementProcessResponse getPayload() { return payload; }
}
InvokeIncrementProcessResponseMessage_ invokeIncrementProcessResponseMessage_ = new InvokeIncrementProcessResponseMessage_();

public class IncrResponse_ {
IncrResponse parameters = new IncrResponse();
public IncrResponse getParameters() { return parameters; }
}
IncrResponse_ incrResponse_ = new IncrResponse_();

public class IncrRequest_ {
Incr parameters = new Incr();
public Incr getParameters() { return parameters; }
}
IncrRequest_ incrRequest_ = new IncrRequest_();

InvokeIncrementProcessRequestMessage_ input = invokeIncrementProcessRequestMessage_;
InvokeIncrementProcessResponseMessage_ output = invokeIncrementProcessResponseMessage_;
IncrResponse_ incrementPLResponse = incrResponse_;
IncrRequest_ incrementPLRequest = incrRequest_;

}

invokeincrementprocess :
{
JXPathContext inputCtx = JXPathContext.newContext(input);
varMap.put("input", inputCtx);
JXPathContext outputCtx = JXPathContext.newContext(output);
varMap.put("output", outputCtx);
JXPathContext incrementPLResponseCtx = JXPathContext.newContext(incrementPLResponse);
varMap.put("incrementPLResponse", incrementPLResponseCtx);
JXPathContext incrementPLRequestCtx = JXPathContext.newContext(incrementPLRequest);
varMap.put("incrementPLRequest", incrementPLRequestCtx);
}

v0

'receiveInput'

'PrepareInvokeIncrement'
{
incr.i = "impl:i";
incrementPLRequest.parameters.i = input.payload.input;
}
'Invoke'


'PrepareOutput'
{
invokeIncrementProcessResponse.result = "tns:result";
output.payload.result=incrementPLResponse.parameters.incrReturn;
}

'replyOutput'
v;

v0 : '(' kvpi (',' kvpi) + ')' ;

v :  '(' kvpo (',' kvpo) + ')'
{
  if (!Utils.verify(vMap, varMap)) {
     System.out.println("ERROR: unexpected output");
  }
};

kvpi : '<' key ',' value '>'
{
Utils.setVarValue($key.text, Utils.trimQuote($value.text), varMap);
};

kvpo : '<' key ',' value '>'
{
vMap.put($key.text, $value.text);
};

key : varname ;
value : STRING ;
index : '[' NUMBER ']' ;
varname  : (LETTERS | ALFA) (LETTERS | NUMBER | ALFA | index)* ;
LETTERS : ('a' .. 'z' | 'A' .. 'Z') + ;
NUMBER  : ('1' .. '9') + ;
ALFA : ('_' | '.') + ;
INT  : ([0-9|?])+ ;
STRING : '\'' .*? '\'';
WS  : [ \t\r\n]+ -> skip ;
*/
