LoLA 2.0

Usage: lola [FILE] [--formula=FORMULA] [OPTIONS]...

About LoLA:

  -h, --help                    Print help and exit
      --detailed-help           Print help, including all details and hidden
                                  options, and exit
      --full-help               Print help, including hidden options, and exit
  -V, --version                 Print version and exit

Verification Problem:
  
  The verification problem specifies the question that LoLA is supposed to
  answer.

  -c, --check=PROPERTY          Verify a property  (possible values="none",
                                  "full", "modelchecking"
                                  default=`modelchecking')
  
  The type of property to be verified by LoLA is selected:

  * modelchecking: A given temporal logic formula (specified using the
    mandatory `--formula' or `--buechi' option) is evaluated while generating
    the state space. Search terminates as soon as the value of the formula is
    determined.
  * full: All reachable states are computed without evaluating any property.
    This is useful for determining the size of a (reduced) state space.
  * none: No state space search is performed at all. This is useful for just
    getting statistical data for the net and pre-processing information.


  -f, --formula=FORMULA         Check a formula
  
  If the given string is a formula in one of the temporal logics CTL or LTL,
  this formula is verified during state space exploration. Otherwise, if the
  given string is a file name, such a formula is expected as content of that
  file (requires `--check=modelchecking').


      --buechi=AUTOMATON        Check a linear time property specified as a
                                  Büchi automaton
  
  The given string is expected to be a file name that contains the description
  of a Büchi automaton. During state space exploration, LoLA searches for a
  path that is accepted by that automaton (requires `--check=modelchecking').


Reduction Techniques:
  
  LoLA offers several techniques for alleviating the state space explosion
  problem. Many of them can be applied in combination.

      --search=STRATEGY         Search the state space using a particular
                                  strategy  (possible values="depth",
                                  "sweepline", "covergraph"
                                  default=`depth')
  
  The search strategy determines (1) the order in which states are explored,
  and (2) whether or not computed states are kept in memory.

  * depth: States are explored using the depth-first strategy and kept in
    memory forever.
  * sweepline: States are explored in ascending progress value order determined
    by a pre-processed progress measure. They are released from memory as soon
    as their progress value is smaller those of than any unprocessed states,
    unless the search algorithm has marked them as persistent (for assuring
    termination). Search is exhaustive.
  * covergraph: States are explored using the coverability graph constructions,
   
    i.e. sequences of states are abstracted to their limit. Evaluation of 
    properties may lead to inconclusive results.


      --findpath=POSITION       Perform repeated runs without storing states
                                  (possible values="seq", "par", "alone",
                                  "off" default=`off')
  
  This technique can be applied to simple properties such as reachability
  of a state predicate or deadlock. It repeatedly generates firing sequences
  and checks if the target property is satisfied. States are not stored, hence
  sequence generation is very fast. On the other hand, this method is
  inherently
  incomplete. The value of the property determines, where the technique is
  placed w.r.t. exhaustive search.

  * seq: apply it before executing exhaustive search 
  * par: apply it in parallel to exhaustive search
  * alone: apply it instead of exhaustive search
  * off: do not apply it at all (default)

      --stubborn=STUBBORN       Apply a particular scheme for computing
                                  stubborn sets.  (possible values="tarjan",
                                  "deletion", "off" default=`tarjan')
  
  If LoLA searches for deadlocks or reduces a temporal logic property to a
  simple reachability problem, it always uses the stubborn set method (a
  partial order reduction technique). There are several ways to compute
  stubborn sets which have different performance.

  * tarjan: Stubborn sets are computed by an incremental method that
    investigates strongly connected components in a dependency graph. It has
    linear complexity (in the number of transitions) and leads to superior
    performance if a target state (or deadlock) is actually reachable).
  * deletion: Stubborn sets are computed by repeated deletion of transitions.
    It has quadratic complexity (in the number of transitions) but produces
    smaller stubborn sets. It has superior performance if no target state (or
    deadlock) is actually reachable.


      --cycle                   Apply transition invariant based reduction.
                                  (default=off)
  
  States are computed but only some of them are stored. Stored states are
  sufficient to cover at least one state for each cycle in the state space,
  thus guaranteeing termination of the search. Information about cycles in the
  state space is obtained from transition invariants of the Petri net that are
  determined in preprocessing.


      --symmetry                Apply symmetry reduction.  (default=off)
  
  A generating set for the symmetries of the given net (respecting the given
  formula, if applicable) is computed during pre-processing. During state space
  exploration, markings are transformed into (approximated) canonical
  representatives of their respective equivalence classes before storing. This
  way, only few members of an equivalence class are physically present in the
  set of stored markings.

      --ltlstubborn=ONorOFF     Apply computing stubborn sets for LTL.
                                  (possible values="off", "on"
                                  default=`off')
  

Structural Analysis:
  
  For some problems, LoLA can execute structural checks that yield necessary
  or sufficient conditions. They are applied concurrently to the state
  space exploration. 

      --siphontrap=ORDER        Check for deadlock freedom by exploring the
                                  siphon/trap property  (possible
                                  values="off", "seq", "par", "alone"
                                  default=`off')
  
  A Petri net where all input arcs to transitions have multiplicity 1
  is deadlock-free if every siphon (set of places S where post(S) is subset
  of pre(S)) includes a marked trap (set of places S' where pre(S') is subset
  of post(S')). LoLA translates the problem into a propositional formula and
  evaluates it using the integrated Minisat SAT solver. If the net does not
  satisfy the multiplicity condition, LoLA skips the check.

  * off: do not apply this check (default)
  * seq: apply this check before the main search
  * par: apply this check in parallel to the main search
  * alone: apply only this check (and no other check)

      --siphondepth=INT         Control the length of the formula for the
                                  siphon/trap check.  (default=`1073741824')
  
  If the value is smaller than the number of places of the net, a shorter
  formula for the siphon/trap problem is generated. It may then yield 
  inconclusive results. Shorter value means smaller formula, higher
  probability of an inconclusive result but on the other hand less memory
  consumption and quicker result. LoLA will never make false decisions on
  an inconclusive outcome.

      --minisatargs=STRING      Pass options to the integrated Minisat SAT
                                  solver.  (default=`')
  
  The string is passed to Minisat as if it were its command line string.
  This way, you can modify the way Minisat is solving the siphon/trap problem.
  Do not try to give a filename as the input comes from LoLA.

      --siphonwitness[=FILE]    Print witness siphon and trap  (default=`-')
  
  If the siphon/trap property does not hold, print a siphon that does not
  contain 
  a marked trap and the unique maximal trap included. This option is only
  useful
  when siphontrap != off. If the siphon/trap propert happens to hold, or the
  result is inconclusive, no witness is printed.


StateEquationTask:
  
      --stateequation=ORDER     Checking reachability of petri net state
                                  equation  (possible values="off", "seq",
                                  "par", "alone" default=`off')
  
  Using this option invokes Sara, which sends the results back.
  There are four values to set stateequation: off, seq, par and alone.

  * off: do not apply this check (default)
  * seq: apply this check before the main search
  * par: apply this check in parallel to the main search
  * alone: do only this check without the main search


Input:
  
  Input can be given in several formats.

      --compressed              Read a compressed file  (default=off)
  
  In compressed format, net elements are reduced to indices, thus making it
  easier to transform an input file into internal data structures. This is
  useful for repeated use of the same net, but not at all readable for humans.


Output:
  
  Apart from the answer to the verification problem, LoLA can output other
  useful information. This information can help in understanding the result
  produced by LoLA.

  -s, --state[=FILE]            Print witness state  (default=`-')
  
  If the verification problem asks for the reachability of a state, and such a
  state is indeed reachable, this option forces LoLA to write such a state to
  the specified file, or to the standard output stream (-).


  -p, --path[=FILE]             Print witness path  (default=`-')
  
  If the verification problem asks for the existence of a path (e.g. to a given
  state, or accepted by a Büchi automaton), this option forces LoLA to write
  such a path to the specified file, or to the standard output stream (-).


      --pathshape[=SHAPE]       Select the shape of the witness path  (possible
                                  values="linear", "run", "fullrun",
                                  "eventstructure" default=`linear')
  
  If a path is written using the `--path' option, several formats are available
  to control the way in which concurrency is expressed, and how much redundant
  information is provided.

  * linear: Print all transitions in path in sequential order, i.e. no
    concurrency information is given.
  * fullrun: The path is expressed as a partially ordered run (an unrolling of
    the net) consisting of conditions (places) and events (transitions).
  * run: Same as fullrun, but obvious places and transitions (e.g. plain
    sequences) are suppressed.
  * eventstructure: Same as run, bit places are not reported.


      --writeCompressed[=PREFIX]
                                Write a compressed file
                                  (default=`compressedOutput')
  
  The net structure is written using indices instead of identifiers. Thus,
  subsequent reading is more efficient.

      --writeBuechi[=PREFIX]    Write a Buechi automaton  (default=`automaton')
  
  If a formula classified as LTL problem is given, this option writes a text
  file
  containing the corresponding Buechi automaton (accepting the negation of the
  given problem)


Logging:
  
  During search, LoLA generates tons of messages concerning results of
  preprocessing, progress information during search, or statistical data.

  -q, --quiet                   Suppress messages.  (default=off)
  
  In quiet mode, nothing is reported (except of error messages). This option is
  in particular useful in combination with the JSON output.


  -r, --reporter=REPORTER       Select a reporting procedure.  (possible
                                  values="stream", "socket", "silent"
                                  default=`stream')
  
  LoLA has different ways to emit log messages.

  * stream: Messages are sent to the standard error stream (stderr) of the
    process that runs LoLA.
  * socket: Messages are sent to a remote process (`listener') via socket
    communication.
  * silent: All messages are suppressed.


  -j, --json[=FILE]             Output structured data in JSON format.
                                  (default=`-')
  
  Creates structured output in JSON format (JavaScript Object Notation). This
  format is designed to be easily consumable by other programs. The used keys
  are described in LoLA's manual. The output is written into the specified
  file, or by default to the standard output stream (-).


      --jsoninclude=DATA        Control which data should be included in the
                                  JSON output.  (possible values="path",
                                  "state")
  
  This option controls whether additional aspects should be included in the
  JSON output.


      --nolog                   Do not send logging information  (default=off)
  
  LoLA sends statistical data to a logging server. This function switches off
  logging.


      --outputport=PORT         Define output port number  (default=`5555')
  
  This option specifies a port number for outgoing messages. This port is used
  to communicate with a listener process which displays LoLA's reports.


      --inputport=PORT          Define input port number  (default=`5556')
  
  This option specifies a port number for incoming messages. This port is used
  to remotely terminate LoLA in case the option `--remoteTermination' is used.


      --address=HOSTNAME        Define hostname or IP for reports
                                  (default=`localhost')
  
  The hostname or IP address of a listener process to which LoLA will send
  reports to.

      --remoteTermination[=SECRET]
                                Allow remote termination  (default=`goodbye')
  
  This option installs a termination handler that allows to remotely terminate
  LoLA by sending a specified SECRET to the input port.


Debugging:
      --printNet                Print the net  (default=off)
      --stats                   Print memory statistics  (default=off)
      --tscc                    Use TSCC exploration  (default=off)

Limits:
  
  To avoid negative effects of physically exceeding the resources of the
  machine that runs LoLA, artificial limits can be set that force LoLA to
  terminate when exceeded.

      --timelimit=SECONDS       Abort LoLA after the given time has passed
  
  LoLA is aborted when the given number of seconds have passed.


      --localtimelimit=SECONDS  Abort a child process of LoLA that executes a
                                  subtask,
                                     after the given time has passed. Use 0 to
                                  use a dynamic calculated limit.
  
  A child process of LoLA is aborted when the given number of seconds have
  passed. 
  The process returns UNKNOWN as result. LoLA continues with the execution of
  the next subproblem.
  If 0 is passed as argument a dynamic calculated local time limit is used. It
  is calculated 
  based on the remaining time, if a globel time limit (--timelimit) is set. 

      --symmtimelimit=SECONDS   Abort symmetry computation after the given time
                                  has passed
  
  When the given time limit is exceeded, LoLA stops exploration of symmetries
  and continues with those generators that have been found so far.


      --markinglimit=MARKINGS   Abort LoLA after the given number of markings
                                  have been explored
  
  LoLA is aborted as soon as it reports a number of explored markings that is
  larger than the specified number.


Advanced:
  
  A lot of other aspects of LoLA can be controlled with command line
  parameters. A complete list can be shown with `--detailed-help'.

      --store=STORE             Manage visited states using the specified data
                                  structure  (possible values="comp",
                                  "prefix", "stl", "bloom"
                                  default=`prefix')
  
  LoLA supports several structures for managing the stored states:

  * comp: for internal (debugging) use only
  * prefix: Store states as a prefix tree
  * stl: Store states using the set class in the C++ standard template library
    (STL).
  * bloom: do not store states, but record hash values of visited states. When
    hash collisions occur, search is not exhaustive. The probability of hash
    collisions can be reduced by increasing the number of concurrently used
    hash functions.


      --encoder=ENCODER         Code visited states using the specified coding
                                  scheme  (possible values="bit", "copy",
                                  "simplecompressed", "fullcopy"
                                  default=`bit')
  
  LoLA supports several strategies for transforming a marking into a sequence
  of bits to be finally stored. Some schemes represent only significant places.
  The marking of insignificant places is fully determined by the significant
  ones via place invariants of the Petri net. Information about significance of
  places is computed in pre-processing.

  * bit: Marking of significant places is packed such that each place gets only
    as many bits as necessary according to its capacity.
  * copy: Marking of significant places is transformed using one word per
    place.
  * simplecompressed: Marking of significant places is encoded using a variable
    length coding scheme that assigns small codes to low marking values and
    large codes to bigger marking values.
  * fullcopy: Marking of all places is transformed using one word per place.


      --bucketing[=BUCKETS]     Activate bucketing, if the selected store
                                  supports it.  (default=`16')
  
  The argument is valid for the sweep-line method only, should be a power of 2,
  and determines the number of buckets per progress value.


      --hashfunctions=SHORT     Activate the specified number of hash functions
                                  for the Bloom filter  (default=`2')
  
  Using the `--store=bloom' option, only the hash values of visited states are
  recorded. This option controls, for how many (stochastically independent)
  hash functions, the hash value is recorded. Increased number reduces the
  probability of hash collisions thus getting search closer to exhaustion of
  the state space.


      --ltlmode=LTLMODE         Select LTL-state storage mode  (possible
                                  values="tree", "flat" default=`tree')
      --sweepfronts=FRONTS      Number of fronts that may run simultaneously in
                                  the SweepLine method.  (default=`1')
  
  In addition, a higher number of threads can be selected to sweep through
  states inside any single front concurrently.


      --sweeplinedelay=PERCENTAGE
                                Parameter for the SweepLine search strategy
                                  (default=`100')
  
  Percentage of transitions with negative progress values for which
  non-persistent states are remembered.


      --sweeplinespread=MULTIPLIER
                                Allow spreading of progress values over a
                                  larger range.  (default=`1')
      --cycleheuristic=K        Heuristical parameter for transition invariant
                                  based analysis.  (default=`-1')
      --retrylimit=RETRIES      Set number of retries (0 for infinite retries;
                                  relevant only for `--search=findpath')
                                  (default=`0')
  
  Using `--search=findpath', randomly selected transitions are fired without
  storing states. Occasionally, search resumes at the initial marking (see
  `--depthlimit'). After RETRIES resets to the initial marking, LoLA terminates
  and assumes that the target state is not reachable (which is not necessarily
  the correct result as search is not exhaustive).


      --depthlimit=DEPTH        Set number of transitions to fire before search
                                  is aborted or retried (relevant for
                                  `--search=findpath').  (default=`1000000')
  
  Using `--search=findpath', randomly selected transitions are fired without
  storing states. When DEPTH is reached, search resumes at the initial marking
  thus exploring another path.


      --threads=THREADS         Set number of threads to be used for
                                  parallelization  (default=`1')
  
  If the machine running LoLA has several cores, LoLA can parallelize the
  access to the stored markings to the given number of threads.

