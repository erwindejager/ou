import "variables.eol";


operation BPEL!t_condition expand() {
	self.println();
	self.text.println();
	expandChildren(self);
} 

// var logical operator value
operation BPEL!t_condition transform(sb : Any, context : Map) {
	var operator = getComparisonOperator(self.text);
	var expr : Sequence = self.text.split(operator);
	var cond = getLRValue(expr.first()) + tranlateComparisonOperatorToJava(operator, getLRValue(expr.second()));
	addCondition(context, cond);
	sb.append("{ if (!");
	sb.append(cond);
	sb.append(") System.out.println(\"ERROR: NOT " + escapeQuotes(cond) + "\"); }");
}

operation getLRValue(value : String) : String {
	var result = getVariablesAsList().select(e|value.matches(".*" + e + ".*"));
	if (result.size() > 0) {
		result = result.first();
	} else {
		result = value;
	}
	return result;
}

operation getComparisonOperator(expr : String) : String {
	return getComparisonOperators().select(e|expr.matches(".*" + e + ".*")).first();
}

operation getComparisonOperators() : Sequence {
	return "<>,>=,<=,=,<,>".split(",");
}

operation tranlateComparisonOperatorToJava(operator : String, parameter : String) : String {
	var result = operator;
	if (result = "=") {
		result = ".equals(" + parameter + ")";
	}
	return result;
}







