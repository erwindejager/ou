// Automatically generated by EDJ BPEL2CFG Transformer : Fri Apr 13 15:13:10 CEST 2018

grammar WhileSample;

options {language=Java;}

@header {
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
}

@members {
Map<String,Object> varMap = new HashMap();
Map<String,String> vMap = new HashMap();

public class WhileSampleRequest {
String input;
public String getInput() { return input; }
public void setInput(String s) { input = s; }
}
WhileSampleRequest whileSampleRequest = new WhileSampleRequest();

public class WhileSampleResponse {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
WhileSampleResponse whileSampleResponse = new WhileSampleResponse();

public class WhileSampleRequestMessage_ {
WhileSampleRequest payload = new WhileSampleRequest();
public WhileSampleRequest getPayload() { return payload; }
}
WhileSampleRequestMessage_ whileSampleRequestMessage_ = new WhileSampleRequestMessage_();

public class WhileSampleResponseMessage_ {
WhileSampleResponse payload = new WhileSampleResponse();
public WhileSampleResponse getPayload() { return payload; }
}
WhileSampleResponseMessage_ whileSampleResponseMessage_ = new WhileSampleResponseMessage_();

WhileSampleRequestMessage_ input = whileSampleRequestMessage_;
WhileSampleResponseMessage_ output = whileSampleResponseMessage_;
int iterator;
String temp;

}

whilesample :
{
JXPathContext inputCtx = JXPathContext.newContext(input);
varMap.put("input", inputCtx);
JXPathContext outputCtx = JXPathContext.newContext(output);
varMap.put("output", outputCtx);
JXPathContext iteratorCtx = JXPathContext.newContext(iterator);
varMap.put("iterator", iteratorCtx);
JXPathContext tempCtx = JXPathContext.newContext(temp);
varMap.put("temp", tempCtx);
}

v0

'receiveInput'

'Assign'
{
iterator = 0;
temp = input.payload.input;
}

'Whilex' whilex_block_seq post_whilex ;

whilex_block_seq : ( whilex_block | whilex_block whilex_block_seq |  ) ;

whilex_block : { iterator < 5 }?

'LoopAssign'
{
iterator = iterator+1;
temp = temp + " " + (String) Utils.getVarValue("input/payload/input", varMap);
} ;

post_whilex :

'AssignOutput'
{
whileSampleResponse.result = "tns:result";

output.payload.result = temp;
}

'replyOutput'
v;

v0 : '(' kvpi (',' kvpi) + ')' ;

v :  '(' kvpo (',' kvpo) + ')'
{
  if (!Utils.verify(vMap, varMap)) {
     System.out.println("ERROR: unexpected output");
  }
};

kvpi : '<' key ',' value '>'
{
Utils.setVarValue($key.text, Utils.trimQuote($value.text), varMap);
};

kvpo : '<' key ',' value '>'
{
vMap.put($key.text, $value.text);
};

key : varname ;
value : STRING ;
index : '[' NUMBER ']' ;
varname  : (LETTERS | ALFA) (LETTERS | NUMBER | ALFA | index)* ;
LETTERS : ('a' .. 'z' | 'A' .. 'Z') + ;
NUMBER  : ('1' .. '9') + ;
ALFA : ('_' | '.') + ;
INT  : ([0-9|?])+ ;
STRING : '\'' .*? '\'';
WS  : [ \t\r\n]+ -> skip ;


/*
// Automatically generated by EDJ BPEL2CFG Transformer : Fri Apr 13 09:44:56 CEST 2018

grammar WhileSample;

options {language=Java;}

@header {
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
}

@members {
Map<String,Object> varMap = new HashMap();
Map<String,String> vMap = new HashMap();

public class WhileSampleRequest {
String input;
public String getInput() { return input; }
public void setInput(String s) { input = s; }
}
WhileSampleRequest whileSampleRequest = new WhileSampleRequest();

public class WhileSampleResponse {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
WhileSampleResponse whileSampleResponse = new WhileSampleResponse();

public class WhileSampleRequestMessage_ {
WhileSampleRequest payload = new WhileSampleRequest();
public WhileSampleRequest getPayload() { return payload; }
}
WhileSampleRequestMessage_ whileSampleRequestMessage_ = new WhileSampleRequestMessage_();

public class WhileSampleResponseMessage_ {
WhileSampleResponse payload = new WhileSampleResponse();
public WhileSampleResponse getPayload() { return payload; }
}
WhileSampleResponseMessage_ whileSampleResponseMessage_ = new WhileSampleResponseMessage_();

WhileSampleRequestMessage_ input = whileSampleRequestMessage_;
WhileSampleResponseMessage_ output = whileSampleResponseMessage_;
int iterator; //@QQQ= int;
String temp; // @QQQ= String;

}

whilesample :
{
JXPathContext inputCtx = JXPathContext.newContext(input);
varMap.put("input", inputCtx);
JXPathContext outputCtx = JXPathContext.newContext(output);
varMap.put("output", outputCtx);
JXPathContext iteratorCtx = JXPathContext.newContext(iterator);
varMap.put("iterator", iteratorCtx);
JXPathContext tempCtx = JXPathContext.newContext(temp);
varMap.put("temp", tempCtx);
}

v0

'receiveInput'

'Assign'
{
iterator = 0; //@QQQQQ
temp = input.payload.input;
}

'Whilex' whilex_block_seq post_whilex ;

whilex_block_seq : ( whilex_block | whilex_block whilex_block_seq |  ) ;

whilex_block : { iterator < 5 }? 

'LoopAssign'
{
	iterator = iterator+1;
	temp = temp + " " + (String) Utils.getVarValue("input/payload/input", varMap);
} ;

post_whilex :

'AssignOutput'
{
whileSampleResponse.result = "tns:result";

output.payload.result = temp;
}

'replyOutput'
v;

v0 : '(' kvpi (',' kvpi) + ')' ;

v :  '(' kvpo (',' kvpo) + ')'
{
  if (!Utils.verify(vMap, varMap)) {
     System.out.println("ERROR: unexpected output");
  }
};

kvpi : '<' key ',' value '>'
{
Utils.setVarValue($key.text, Utils.trimQuote($value.text), varMap);
};

kvpo : '<' key ',' value '>'
{
vMap.put($key.text, $value.text);
};

key : varname ;
value : STRING ;
index : '[' NUMBER ']' ;
varname  : (LETTERS | ALFA) (LETTERS | NUMBER | ALFA | index)* ;
LETTERS : ('a' .. 'z' | 'A' .. 'Z') + ;
NUMBER  : ('1' .. '9') + ;
ALFA : ('_' | '.') + ;
INT  : ([0-9|?])+ ;
STRING : '\'' .*? '\'';
WS  : [ \t\r\n]+ -> skip ;

*/