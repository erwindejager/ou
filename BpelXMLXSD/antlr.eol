operation antlrHeader(sb : Any) {
  	sb.append("@header {"); newline(sb);
  	sb.append("import java.util.HashMap;"); newline(sb);
  	sb.append("import java.util.Map;"); newline(sb);
  	sb.append("import org.apache.commons.jxpath.JXPathContext;"); newline(sb);
  	sb.append("}"); newline(sb); newline(sb);
}

operation antlrMembers(sb : Any) {
  	sb.append("@members {"); newline(sb);
	sb.append("Map<String,Object> varMap = new HashMap();\n"); 
	sb.append("Map<String,String> vMap = new HashMap();\n");
	newline(sb);
  	getTypes().transform(sb,context);
  	transformMessages(sb,context);
  	getVariables().transformMembers(sb);newline(sb);
  	antlrVerify(sb);newline(sb);
  	antlrQuote(sb);newline(sb);
  	antlrXPath(sb);
  	sb.append("}"); newline(sb); newline(sb);
}

operation antlrVerify(sb : Any) {
	sb.append("	boolean verify() {\n");
	sb.append("		boolean result = true;\n");
	sb.append("		for (String key : vMap.keySet()) {\n");
	sb.append("			String expectedVal = trimQuote(vMap.get(key));\n");
	sb.append("			String actualValue = getVarValue(key);\n");
	sb.append("			if (!expectedVal.equals(actualValue)) {\n");
	sb.append("				System.out.println(\"Actual: \" + key + \" : \" + actualValue + \" <> Expected: \" + key + \" : \" + expectedVal);\n");
	sb.append("				result = false;	\n");
	sb.append("			}\n");
	sb.append("		}\n");
	sb.append("		return result;\n");
	sb.append("	}\n");
}

operation antlrQuote(sb : Any) {
	sb.append("String addQuote(String s) { return \"'\" + s +\"'\"; }\n");
 	sb.append("String trimQuote(String s) { return s.replace(\"'\",\"\"); }\n");
}

operation antlrXPath(sb : Any) {
	sb.append("JXPathContext getCtx(String varPath) {\n");
 	sb.append("String s = varPath.substring(0, varPath.indexOf('.'));\n");
	sb.append("return JXPathContext.newContext(varMap.get(s)); }\n\n");
 	sb.append("String getxPath(String varPath) {\n");
	sb.append("String path = varPath.substring(varPath.indexOf('.') + 1);\n");
 	sb.append("return path.replace(\".\", \"/\"); }\n\n");
	sb.append("void setVarValue(String path, String value) { getCtx(path).setValue(getxPath(path), value); }\n");
 	sb.append("String getVarValue(String path) { return (String)getCtx(path).getValue(getxPath(path)); }\n");
}

operation antlrCallVerify(sb : Any) {
	sb.append("  if (!verify()) {\n");
	sb.append("	    System.out.println(\"ERROR: unexpected output\");\n"); 
    sb.append("  }\n");
}
operation antlrOptions(sb : Any) {
  	sb.append("options {language=Java;}"); newline(sb); newline(sb);
}

operation antlrV(sb : Any) {
	newline(sb); newline(sb);
  	sb.append("v0	: '(' kvpi (',' kvpi) + ')' ;\n\n");
  	sb.append("v :  '(' kvpo (',' kvpo) + ')'\n");
  	sb.append("{\n");
  	antlrCallVerify(sb);
    sb.append("};\n");
}

operation antlrKV(sb : Any) {
	newline(sb); 
  	sb.append("kvpi : '[' key ',' value ']'\n");
  	sb.append("{\n");
    sb.append("setVarValue($key.text, trimQuote($value.text));\n");
    sb.append("};\n\n");
  	sb.append("kvpo : '[' key ',' value ']'\n");
  	sb.append("{\n");
    sb.append("vMap.put($key.text, $value.text);\n");
    sb.append("};\n");
}

operation antlrTypes(sb : Any) {
	newline(sb); 
  	sb.append("key : varname ;\n");
  	sb.append("value : STRING ;\n");
  	sb.append("varname  : (LETTERS | ALFA) (LETTERS | NUMBER | ALFA)* ;\n");
  	sb.append("LETTERS : ('a' .. 'z' | 'A' .. 'Z') + ;\n");
  	sb.append("NUMBER  : ('1' .. '9') + ('0' .. '9') + ;\n");
  	sb.append("ALFA	: ('_' | '.') + ;\n");
  	sb.append("INT 	: ([0-9|?])+ ;\n");
  	sb.append("STRING : '\\'' .*? '\\'';\n");
  	sb.append("WS 	: [ \\t\\r\\n]+ -> skip ;\n");
}


operation transformChildrenMembers(sb : Any, e : Any) {
	for (c in e.children) {
 		c.transformMembers(sb);
	}
}
/*
operation transformChildrenVarMap(sb : Any, e : Any) {
	for (c in e.children) {
 		c.transformVarMap(sb);
	}
}

operation transformChildrenVMap(sb : Any, e : Any) {
	for (c in e.children) {
 		c.transformVMap(sb);
	}
}
*/
