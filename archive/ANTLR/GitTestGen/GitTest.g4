// Automatically generated by EDJ BPEL2CFG Transformer : Fri Nov 16 19:01:29 CET 2018

grammar GitTest;

options {language=Java;}

@header {
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
}

@members {
Map<String,Object> varMap = new HashMap();
Map<String,String> vMap = new HashMap();
String catchExceptionPoint = "";

public class GitTestRequest {
String input;
public String getInput() { return input; }
public void setInput(String s) { input = s; }
}
GitTestRequest gitTestRequest = new GitTestRequest();

public class GitTestResponse {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
GitTestResponse gitTestResponse = new GitTestResponse();

public class GitTestRequestMessage_ {
GitTestRequest payload = new GitTestRequest();
public GitTestRequest getPayload() { return payload; }
}
GitTestRequestMessage_ gitTestRequestMessage_ = new GitTestRequestMessage_();

public class GitTestResponseMessage_ {
GitTestResponse payload = new GitTestResponse();
public GitTestResponse getPayload() { return payload; }
}
GitTestResponseMessage_ gitTestResponseMessage_ = new GitTestResponseMessage_();

GitTestRequestMessage_ input = gitTestRequestMessage_;
GitTestResponseMessage_ output = gitTestResponseMessage_;

}

gittest :
{
JXPathContext inputCtx = JXPathContext.newContext(input);
varMap.put("input", inputCtx);
JXPathContext outputCtx = JXPathContext.newContext(output);
varMap.put("output", outputCtx);
}

v0

'receiveInput'

'Assign'
{
gitTestResponse.result = "tns:result";

output.payload.result = input.payload.input;
}

'replyOutput'
v;

v0 : '(' kvpi (',' kvpi) + ')' ;

v :  '(' kvpo (',' kvpo) + ')'
{
  if (!Utils.verify(vMap, varMap)) {
     System.out.println("ERROR: unexpected output");
  }
};

kvpi : '<' key ',' value '>'
{
Utils.setVarValue($key.text, Utils.trimQuote($value.text), varMap);
};

kvpo : '<' key ',' value '>'
{
vMap.put($key.text, $value.text);
};

exit: v
{ throw new ParseCatchException(catchExceptionPoint); };
key : varname ;
value : STRING ;
index : '[' NUMBER ']' ;
varname  : (LETTERS | ALFA) (LETTERS | NUMBER | ALFA | index)* ;
LETTERS : ('a' .. 'z' | 'A' .. 'Z') + ;
NUMBER  : ('1' .. '9') + ;
ALFA : ('_' | '.') + ;
INT  : ([0-9|?])+ ;
STRING : '\'' .*? '\'';
WS  : [ \t\r\n]+ -> skip ;

