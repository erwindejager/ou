operation xpath(expr : String) : String {
  	var result : String = expr;
  	if (expr.matches("concat\\(.*\\)")) {
  		result = evalConcat(expr);
  	} else if (expr.matches("count\\(.*\\)")) {
  		result = evalCount(expr);  	
  	} else if (expr.startsWith("$")) {
  		result = evalXpathReference(expr);
  	}
  	return result;
}

// concat(p1,p2, ...)
operation evalConcat(expr : String) : String {
	var lrValue = expr.split(",");
	var result = "";
	var par1 : String = lrValue.first().split("\\(").second();
	if (lrValue.size() == 2) {
		result = xpath(par1) + " + " + xpath(lrValue.second());
	} else if (lrValue.size() == 3) {
		result = xpath(par1) + " + " + xpath(lrValue.second())  + " + " + xpath(lrValue.third());
	}
	return result;
}

// count(expr)
operation evalCount(expr : String) : String {
	var result = "Utils.getVarValueInt(\"" + makePath(trimXpathPrefix(trimAllNs(replaceSlash(expr)))) +  "\", varMap)";
	return result;
}

operation evalXpathReference(expr : String) : String {
  	var result : String = "";
	var tokens = expr.split("/");
	for(t in tokens) {
		var sep = "";
		if (result.length() > 0) {
			sep = ".";
		}
		result = result + sep + trimNs(t);
	}
	result = trimXpathPrefix(result);
	if (result.endsWith(")")) {
		result = result.replace("\\)", "");	
	}
	
	var theType = getReturnType(trimIndex(result));
	if (hasExprOperator(result)) {
		theType = "int";
	}
	
	if (".".isSubstringOf(expr) or "/".isSubstringOf(expr)) {
		result = createReturnValue(theType, makePath(trimXpathPrefix(trimAllNs(replaceSlash(result)))));
	}
	
	return result;
}

operation trimXpathPrefix(s : String) : String {
	var result = s;
	if(result.startsWith("$")) {
		result = s.substring(1);
	} else {
		result = s.replace("\\$","");
	}
	return result;
}

operation trimIndex(s : String) : String {
	return s.split("\\[").first();
}

operation getReturnType(javaPath : String) : String {

	var theType = getType_(getLeaf(javaPath)); 
	if (isPrimitiveXmlType(theType)) {
		theType = tranlateXmlPrimitiveTypesToJava(theType);
	}
	return theType;
}

operation createReturnValue(theType : String, xpath : String) : String {
	var result = "(" + theType + ") "; 
	if ("String".equals(theType)) {
		result = result + "Utils.getVarValue(";
	} else if ("int".equals(theType)) {
		result = result + "Utils.getVarValueInt(";
	} else {
		result = result + "Utils.getVarValueO(";
	}
	result = result + "\"" + xpath + "\", varMap)";
	return result;
}

operation hasExprOperator(expr : String) : Boolean {
	var result = false;
	for(o in getExprOperators()) {
		if (expr.contains(o)) {
			return true;
		}
	}
	return result;
}

operation getExprOperators() : Sequence {
	return "+,-,*".split(",");
}