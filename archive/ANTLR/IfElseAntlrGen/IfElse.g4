// Automatically generated by EDJ BPEL2CFG Transformer : Thu Apr 05 15:56:28 CEST 2018

grammar IfElse;

options {language=Java;}

@header {
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
}

@members {
Map<String,Object> varMap = new HashMap();
Map<String,String> vMap = new HashMap();

public class IfElseRequest {
String input;
public String getInput() { return input; }
public void setInput(String s) { input = s; }
}
IfElseRequest ifElseRequest = new IfElseRequest();

public class IfElseResponse {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
IfElseResponse ifElseResponse = new IfElseResponse();

public class IfElseRequestMessage_ {
IfElseRequest payload = new IfElseRequest();
public IfElseRequest getPayload() { return payload; }
}
IfElseRequestMessage_ ifElseRequestMessage_ = new IfElseRequestMessage_();

public class IfElseResponseMessage_ {
IfElseResponse payload = new IfElseResponse();
public IfElseResponse getPayload() { return payload; }
}
IfElseResponseMessage_ ifElseResponseMessage_ = new IfElseResponseMessage_();

IfElseRequestMessage_ input = ifElseRequestMessage_;
IfElseResponseMessage_ output = ifElseResponseMessage_;

}

ifelse :
{
JXPathContext inputCtx = JXPathContext.newContext(input);
varMap.put("input", inputCtx);
JXPathContext outputCtx = JXPathContext.newContext(output);
varMap.put("output", outputCtx);
}

v0

'receive'

( 'If_0' { input.payload.input.equals("0") }?

'Assign_1'
{
ifElseResponse.result = "tns:result";

output.payload.result = "1";
}

'replyIf'

| 'else' { !input.payload.input.equals("0") }?

'Assign_0'
{
ifElseResponse.result = "tns:result";

output.payload.result = "0";
}

'ReplyElse'
)
v;

v0 : '(' kvpi (',' kvpi) + ')' ;

v :  '(' kvpo (',' kvpo) + ')'
{
  if (!Utils.verify(vMap, varMap)) {
     System.out.println("ERROR: unexpected output");
  }
};

kvpi : '<' key ',' value '>'
{
Utils.setVarValue($key.text, Utils.trimQuote($value.text), varMap);
};

kvpo : '<' key ',' value '>'
{
vMap.put($key.text, $value.text);
};

key : varname ;
value : STRING ;
index : '[' NUMBER ']' ;
varname  : (LETTERS | ALFA) (LETTERS | NUMBER | ALFA | index)* ;
LETTERS : ('a' .. 'z' | 'A' .. 'Z') + ;
NUMBER  : ('1' .. '9') + ;
ALFA : ('_' | '.') + ;
INT  : ([0-9|?])+ ;
STRING : '\'' .*? '\'';
WS  : [ \t\r\n]+ -> skip ;


/*
// Automatically generated by EDJ BPEL2CFG Transformer : Sat Mar 24 17:10:41 CET 2018

grammar IfElse;

options {language=Java;}

@header {
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.jxpath.JXPathContext;
}

@members {
Map<String,Object> varMap = new HashMap();
Map<String,String> vMap = new HashMap();

public class IfElseRequest {
String input;
public String getInput() { return input; }
public void setInput(String s) { input = s; }
}
IfElseRequest ifElseRequest = new IfElseRequest();

public class IfElseResponse {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
IfElseResponse ifElseResponse = new IfElseResponse();

public class IfElseRequestMessage_ {
IfElseRequest payload = new IfElseRequest();
public IfElseRequest getPayload() { return payload; }
}
IfElseRequestMessage_ ifElseRequestMessage_ = new IfElseRequestMessage_();

public class IfElseResponseMessage_ {
IfElseResponse payload = new IfElseResponse();
public IfElseResponse getPayload() { return payload; }
}
IfElseResponseMessage_ ifElseResponseMessage_ = new IfElseResponseMessage_();

IfElseRequestMessage_ input = ifElseRequestMessage_;
IfElseResponseMessage_ output = ifElseResponseMessage_;

 boolean verify() {
  boolean result = true;
  for (String key : vMap.keySet()) {
   String expectedVal = trimQuote(vMap.get(key));
   String actualValue = getVarValue(key);
   if (!expectedVal.equals(actualValue)) {
    System.out.println("Actual: " + key + " : " + actualValue + " <> Expected: " + key + " : " + expectedVal);
    result = false; 
   }
  }
  return result;
 }

String addQuote(String s) { return "'" + s +"'"; }
String trimQuote(String s) { return s.replace("'",""); }

JXPathContext getCtx(String varPath) {
String s = varPath.substring(0, varPath.indexOf('.'));
return JXPathContext.newContext(varMap.get(s)); }

String getxPath(String varPath) {
String path = varPath.substring(varPath.indexOf('.') + 1);
return path.replace(".", "/"); }

void setVarValue(String path, String value) { getCtx(path).setValue(getxPath(path), value); }
String getVarValue(String path) { return (String)getCtx(path).getValue(getxPath(path)); }
}

ifelse :
{
varMap.put("input", input);
varMap.put("output", output);
}

v0

'receive'

( 'If_0' { input.payload.input.equals("0") }?

'Assign_1'
{
ifElseResponse.result="tns:result";
output.payload.result="1";
}

'replyIf'

| 'else' { !input.payload.input.equals("0") }?

'Assign_0'
{
ifElseResponse.result="tns:result";
output.payload.result="0";
}

'ReplyElse'
)
v;

v0 : '(' kvpi (',' kvpi) + ')' ;

v :  '(' kvpo (',' kvpo) + ')'
{
  if (!verify()) {
     System.out.println("ERROR: unexpected output");
  }
};

kvpi : '[' key ',' value ']'
{
setVarValue($key.text, trimQuote($value.text));
};

kvpo : '[' key ',' value ']'
{
vMap.put($key.text, $value.text);
};

key : varname ;
value : STRING ;
varname  : (LETTERS | ALFA) (LETTERS | NUMBER | ALFA)* ;
LETTERS : ('a' .. 'z' | 'A' .. 'Z') + ;
NUMBER  : ('1' .. '9') + ('0' .. '9') + ;
ALFA : ('_' | '.') + ;
INT  : ([0-9|?])+ ;
STRING : '\'' .*? '\'';
WS  : [ \t\r\n]+ -> skip ;

 */