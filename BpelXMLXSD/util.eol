/*operation expandLeaf(e : Any) {
	if (e.children.size == 0) {
		e.text.println();
	} else {
		for (c in e.children) {
	 		expandLeaf(c);
		}
	}
}
 
operation expandChildren(e : Any) {
	for (c in e.children) {
 		c.expand();
	}
}
*/ 
// operation expandChildrenSpecificType(e : Any, t : Any) {
// 	for (c in e.children.select(o|o.isTypeOf(t))) {
// 		c.expand();
//	}	
//} 

operation trimNs(s : String) : String {
	var result = s;
	if (result.contains(":")) {
		result = s.split(":").last();
	}
	return result;
}

operation trimAllNs(s : String) : String {
	var path = s.split("\\.");
	path = path.collect(o | trimNs(o));
	return path.concat(".");
}

operation trimLiteral(s : String) : String {
	var result = s;
	if (s <> null and s.length() > 0) {
		result = s.replace("literal.","");
		result = result.replace("literal","");
	}
	return result;
}

operation replaceSlash(s : String) : String {
	return s.replace("/",".");
}

operation transformChildren(sb : Any, context : Map, e : Any) {
	for (c in e.children) {
 		c.transform(sb, context);
	}
}

operation transformChildrenPath(sb : Any, context : Map, e : Any) {
	var path : String = getPath(context);
	if (path <> null and path.length() > 0) {
		path = path + ".";
	}
	addPath(context, path + trimNs(e.tagname).firstToLowerCase());
	for (c in e.children) {
 		transformChildrenPath(sb, context, c);
	}
}

//operation transformChildrenDecl(sb : Any, context : Map, e : Any) {
//	for (c in e.children) {
// 		c.transformDecl(sb, context);
//	}
//}

operation transformChildrenTerminal(sb : Any, e : Any) {
	for (c in e.children) {
 		c.transformTerminal(sb);
	}
}

operation transformChildrenTerminal_(sb : Any, e : Any) {
	for (c in e.children) {
 		c.transformTerminal_(sb);
	}
}

/*
operation transformChildrenCS(sb : Any, e : Any) {
	if (not e.children.isEmpty()) {
		var seq = e.children;
		var last = seq.last();
		seq.remove(seq.last()); 
		for (c in seq) {
 			c.transform(sb);
 			terminalComma(sb);
		}
		last.transform(sb);
	}
}
  
operation transformChildrenCS_(sb : Any, e : Any) {
	if (not e.children.isEmpty()) {
		var seq = e.children;
		var last = seq.last();
		seq.remove(seq.last()); 
		for (c in seq) {
 			c.transform_(sb);
 			terminalComma(sb);
		}
		last.transform_(sb);
	}
}
*/  