// Automatically generated by EDJ BPEL2CFG Transformer : Mon Aug 27 10:45:02 CEST 2018

grammar HandleRequest;

options {language=Java;}

@header {
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
}

@members {
Map<String,Object> varMap = new HashMap();
Map<String,String> vMap = new HashMap();
String catchExceptionPoint = "";

public class Request {
String payload;
public String getPayload() { return payload; }
public void setPayload(String s) { payload = s; }
}
Request request = new Request();

public class HandleRequestResponse {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
HandleRequestResponse handleRequestResponse = new HandleRequestResponse();

public class ComplexRequest {
String payload;
public String getPayload() { return payload; }
public void setPayload(String s) { payload = s; }
}
ComplexRequest complexRequest = new ComplexRequest();

public class HandleComplexRequestResponse {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
HandleComplexRequestResponse handleComplexRequestResponse = new HandleComplexRequestResponse();

public class RejectedRequest {
String payload;
public String getPayload() { return payload; }
public void setPayload(String s) { payload = s; }
}
RejectedRequest rejectedRequest = new RejectedRequest();

public class RejectRequestResponse {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
RejectRequestResponse rejectRequestResponse = new RejectRequestResponse();

public class ReinjectedRequest {
String payload;
public String getPayload() { return payload; }
public void setPayload(String s) { payload = s; }
String service;
public String getService() { return service; }
public void setService(String s) { service = s; }
}
ReinjectedRequest reinjectedRequest = new ReinjectedRequest();

public class ReinjectRequestResponse {
String result;
public String getResult() { return result; }
public void setResult(String s) { result = s; }
}
ReinjectRequestResponse reinjectRequestResponse = new ReinjectRequestResponse();

public class ProcessRequest {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
ProcessRequest processRequest = new ProcessRequest();

public class WsRequest {
String payload;
public String getPayload() { return payload; }
public void setPayload(String s) { payload = s; }
}
public class ProcessRequestResponse {
WsResponse processRequestReturn = new WsResponse();
public WsResponse getProcessRequestReturn() { return processRequestReturn; }
public void setProcessRequestReturn(WsResponse s) { processRequestReturn = s; }
}
ProcessRequestResponse processRequestResponse = new ProcessRequestResponse();

public class WsResponse {
String value;
public String getValue() { return value; }
public void setValue(String s) { value = s; }
}
public class WsFault {
String faultCode;
public String getFaultCode() { return faultCode; }
public void setFaultCode(String s) { faultCode = s; }
String faultString;
public String getFaultString() { return faultString; }
public void setFaultString(String s) { faultString = s; }
}
public class WsException {
WsFault faultInfo = new WsFault();
public WsFault getFaultInfo() { return faultInfo; }
public void setFaultInfo(WsFault s) { faultInfo = s; }
}
public class Fault extends WsException {}
WsException fault = new WsException();
public WsException getFault() { return fault; }
public void setFault(WsException s) { fault = s; }
public class CheckProcessability {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
CheckProcessability checkProcessability = new CheckProcessability();

public class CheckProcessabilityResponse {
WsResponse checkProcessabilityReturn = new WsResponse();
public WsResponse getCheckProcessabilityReturn() { return checkProcessabilityReturn; }
public void setCheckProcessabilityReturn(WsResponse s) { checkProcessabilityReturn = s; }
}
CheckProcessabilityResponse checkProcessabilityResponse = new CheckProcessabilityResponse();

public class CreateExceptionTask {
WsExceptionTaskRequest requestInput = new WsExceptionTaskRequest();
public WsExceptionTaskRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsExceptionTaskRequest s) { requestInput = s; }
}
CreateExceptionTask createExceptionTask = new CreateExceptionTask();

public class WsExceptionTaskRequest {
String exceptionPoint;
public String getExceptionPoint() { return exceptionPoint; }
public void setExceptionPoint(String s) { exceptionPoint = s; }
String payload;
public String getPayload() { return payload; }
public void setPayload(String s) { payload = s; }
String triggerEvent;
public String getTriggerEvent() { return triggerEvent; }
public void setTriggerEvent(String s) { triggerEvent = s; }
}
public class CreateExceptionTaskResponse {
WsResponse createExceptionTaskReturn = new WsResponse();
public WsResponse getCreateExceptionTaskReturn() { return createExceptionTaskReturn; }
public void setCreateExceptionTaskReturn(WsResponse s) { createExceptionTaskReturn = s; }
}
CreateExceptionTaskResponse createExceptionTaskResponse = new CreateExceptionTaskResponse();

public class ClassifyRequest {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
ClassifyRequest classifyRequest = new ClassifyRequest();

public class ClassifyRequestResponse {
WsResponse classifyRequestReturn = new WsResponse();
public WsResponse getClassifyRequestReturn() { return classifyRequestReturn; }
public void setClassifyRequestReturn(WsResponse s) { classifyRequestReturn = s; }
}
ClassifyRequestResponse classifyRequestResponse = new ClassifyRequestResponse();

public class CreateManualTask {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
CreateManualTask createManualTask = new CreateManualTask();

public class CreateManualTaskResponse {
WsResponse createManualTaskReturn = new WsResponse();
public WsResponse getCreateManualTaskReturn() { return createManualTaskReturn; }
public void setCreateManualTaskReturn(WsResponse s) { createManualTaskReturn = s; }
}
CreateManualTaskResponse createManualTaskResponse = new CreateManualTaskResponse();

public class RejectRequestWS {
WsRequest requestInput = new WsRequest();
public WsRequest getRequestInput() { return requestInput; }
public void setRequestInput(WsRequest s) { requestInput = s; }
}
RejectRequestWS rejectRequestWS = new RejectRequestWS();

public class RejectRequestWSResponse {
WsResponse rejectRequestWSReturn = new WsResponse();
public WsResponse getRejectRequestWSReturn() { return rejectRequestWSReturn; }
public void setRejectRequestWSReturn(WsResponse s) { rejectRequestWSReturn = s; }
}
RejectRequestWSResponse rejectRequestWSResponse = new RejectRequestWSResponse();

public class HandleRequestRequestMessage_ {
Request parameters = new Request();
public Request getParameters() { return parameters; }
}
HandleRequestRequestMessage_ handleRequestRequestMessage_ = new HandleRequestRequestMessage_();

public class HandleRequestResponseMessage_ {
HandleRequestResponse parameters = new HandleRequestResponse();
public HandleRequestResponse getParameters() { return parameters; }
}
HandleRequestResponseMessage_ handleRequestResponseMessage_ = new HandleRequestResponseMessage_();

public class HandleComplexRequestRequest_ {
ComplexRequest parameters = new ComplexRequest();
public ComplexRequest getParameters() { return parameters; }
}
HandleComplexRequestRequest_ handleComplexRequestRequest_ = new HandleComplexRequestRequest_();

public class HandleComplexRequestResponse_ {
HandleComplexRequestResponse parameters = new HandleComplexRequestResponse();
public HandleComplexRequestResponse getParameters() { return parameters; }
}
HandleComplexRequestResponse_ handleComplexRequestResponse_ = new HandleComplexRequestResponse_();

public class RejectRequestRequest_ {
RejectedRequest parameters = new RejectedRequest();
public RejectedRequest getParameters() { return parameters; }
}
RejectRequestRequest_ rejectRequestRequest_ = new RejectRequestRequest_();

public class RejectRequestResponse_ {
RejectRequestResponse parameters = new RejectRequestResponse();
public RejectRequestResponse getParameters() { return parameters; }
}
RejectRequestResponse_ rejectRequestResponse_ = new RejectRequestResponse_();

public class ReinjectRequestRequest_ {
ReinjectedRequest parameters = new ReinjectedRequest();
public ReinjectedRequest getParameters() { return parameters; }
}
ReinjectRequestRequest_ reinjectRequestRequest_ = new ReinjectRequestRequest_();

public class ReinjectRequestResponse_ {
ReinjectRequestResponse parameters = new ReinjectRequestResponse();
public ReinjectRequestResponse getParameters() { return parameters; }
}
ReinjectRequestResponse_ reinjectRequestResponse_ = new ReinjectRequestResponse_();

public class CheckProcessabilityResponse_ {
CheckProcessabilityResponse parameters = new CheckProcessabilityResponse();
public CheckProcessabilityResponse getParameters() { return parameters; }
}
CheckProcessabilityResponse_ checkProcessabilityResponse_ = new CheckProcessabilityResponse_();

public class CreateExceptionTaskResponse_ {
CreateExceptionTaskResponse parameters = new CreateExceptionTaskResponse();
public CreateExceptionTaskResponse getParameters() { return parameters; }
}
CreateExceptionTaskResponse_ createExceptionTaskResponse_ = new CreateExceptionTaskResponse_();

public class CreateManualTaskResponse_ {
CreateManualTaskResponse parameters = new CreateManualTaskResponse();
public CreateManualTaskResponse getParameters() { return parameters; }
}
CreateManualTaskResponse_ createManualTaskResponse_ = new CreateManualTaskResponse_();

public class ProcessRequestRequest_ {
ProcessRequest parameters = new ProcessRequest();
public ProcessRequest getParameters() { return parameters; }
}
ProcessRequestRequest_ processRequestRequest_ = new ProcessRequestRequest_();

public class CreateExceptionTaskRequest_ {
CreateExceptionTask parameters = new CreateExceptionTask();
public CreateExceptionTask getParameters() { return parameters; }
}
CreateExceptionTaskRequest_ createExceptionTaskRequest_ = new CreateExceptionTaskRequest_();

public class RejectRequestWSRequest_ {
RejectRequestWS parameters = new RejectRequestWS();
public RejectRequestWS getParameters() { return parameters; }
}
RejectRequestWSRequest_ rejectRequestWSRequest_ = new RejectRequestWSRequest_();

public class ClassifyRequestRequest_ {
ClassifyRequest parameters = new ClassifyRequest();
public ClassifyRequest getParameters() { return parameters; }
}
ClassifyRequestRequest_ classifyRequestRequest_ = new ClassifyRequestRequest_();

public class ClassifyRequestResponse_ {
ClassifyRequestResponse parameters = new ClassifyRequestResponse();
public ClassifyRequestResponse getParameters() { return parameters; }
}
ClassifyRequestResponse_ classifyRequestResponse_ = new ClassifyRequestResponse_();

public class ProcessRequestResponse_ {
ProcessRequestResponse parameters = new ProcessRequestResponse();
public ProcessRequestResponse getParameters() { return parameters; }
}
ProcessRequestResponse_ processRequestResponse_ = new ProcessRequestResponse_();

public class CheckProcessabilityRequest_ {
CheckProcessability parameters = new CheckProcessability();
public CheckProcessability getParameters() { return parameters; }
}
CheckProcessabilityRequest_ checkProcessabilityRequest_ = new CheckProcessabilityRequest_();

public class WsException_ {
Fault fault = new Fault();
public Fault getFault() { return fault; }
}
WsException_ wsException_ = new WsException_();

public class CreateManualTaskRequest_ {
CreateManualTask parameters = new CreateManualTask();
public CreateManualTask getParameters() { return parameters; }
}
CreateManualTaskRequest_ createManualTaskRequest_ = new CreateManualTaskRequest_();

public class RejectRequestWSResponse_ {
RejectRequestWSResponse parameters = new RejectRequestWSResponse();
public RejectRequestWSResponse getParameters() { return parameters; }
}
RejectRequestWSResponse_ rejectRequestWSResponse_ = new RejectRequestWSResponse_();

HandleRequestRequestMessage_ handleRequestInput = handleRequestRequestMessage_;
HandleRequestResponseMessage_ handleRequestOutput = handleRequestResponseMessage_;
String reinject;
String service;
String ok;
HandleComplexRequestRequest_ handleComplexRequestInput = handleComplexRequestRequest_;
HandleComplexRequestResponse_ handleComplexRequestOutput = handleComplexRequestResponse_;
RejectRequestRequest_ rejectRequestInput = rejectRequestRequest_;
RejectRequestResponse_ rejectRequestOutput = rejectRequestResponse_;
ReinjectRequestRequest_ reinjectRequestInput = reinjectRequestRequest_;
ReinjectRequestResponse_ reinjectRequestOutput = reinjectRequestResponse_;
RejectRequestWSResponse_ rejectRequestWSResp = rejectRequestWSResponse_;
RejectRequestWSRequest_ rejectRequestWSReq = rejectRequestWSRequest_;
WsException_ exception = wsException_;
CreateExceptionTaskResponse_ createExceptionTaskWSResponse = createExceptionTaskResponse_;
CreateExceptionTaskRequest_ createExceptionTaskWSRequest = createExceptionTaskRequest_;
String payload;
CheckProcessabilityResponse_ checkProcessabilityWSResponse = checkProcessabilityResponse_;
CheckProcessabilityRequest_ checkProcessabilityWSRequest = checkProcessabilityRequest_;
ProcessRequestResponse_ handleRequestWSResponse = processRequestResponse_;
ProcessRequestRequest_ handleRequestWSRequest = processRequestRequest_;
String valid;
ClassifyRequestResponse_ classifyRequestWSResponse = classifyRequestResponse_;
ClassifyRequestRequest_ classifyRequestWSRequest = classifyRequestRequest_;
String requestType;
CreateManualTaskResponse_ createManualTaskWSResponse = createManualTaskResponse_;
CreateManualTaskRequest_ createManualTaskWSRequest = createManualTaskRequest_;

}

handlerequest :
{
JXPathContext handleRequestInputCtx = JXPathContext.newContext(handleRequestInput);
varMap.put("handleRequestInput", handleRequestInputCtx);
JXPathContext handleRequestOutputCtx = JXPathContext.newContext(handleRequestOutput);
varMap.put("handleRequestOutput", handleRequestOutputCtx);
JXPathContext reinjectCtx = JXPathContext.newContext(reinject);
varMap.put("reinject", reinjectCtx);
JXPathContext serviceCtx = JXPathContext.newContext(service);
varMap.put("service", serviceCtx);
JXPathContext okCtx = JXPathContext.newContext(ok);
varMap.put("ok", okCtx);
JXPathContext handleComplexRequestInputCtx = JXPathContext.newContext(handleComplexRequestInput);
varMap.put("handleComplexRequestInput", handleComplexRequestInputCtx);
JXPathContext handleComplexRequestOutputCtx = JXPathContext.newContext(handleComplexRequestOutput);
varMap.put("handleComplexRequestOutput", handleComplexRequestOutputCtx);
JXPathContext rejectRequestInputCtx = JXPathContext.newContext(rejectRequestInput);
varMap.put("rejectRequestInput", rejectRequestInputCtx);
JXPathContext rejectRequestOutputCtx = JXPathContext.newContext(rejectRequestOutput);
varMap.put("rejectRequestOutput", rejectRequestOutputCtx);
JXPathContext reinjectRequestInputCtx = JXPathContext.newContext(reinjectRequestInput);
varMap.put("reinjectRequestInput", reinjectRequestInputCtx);
JXPathContext reinjectRequestOutputCtx = JXPathContext.newContext(reinjectRequestOutput);
varMap.put("reinjectRequestOutput", reinjectRequestOutputCtx);
JXPathContext rejectRequestWSRespCtx = JXPathContext.newContext(rejectRequestWSResp);
varMap.put("rejectRequestWSResp", rejectRequestWSRespCtx);
JXPathContext rejectRequestWSReqCtx = JXPathContext.newContext(rejectRequestWSReq);
varMap.put("rejectRequestWSReq", rejectRequestWSReqCtx);
JXPathContext exceptionCtx = JXPathContext.newContext(exception);
varMap.put("exception", exceptionCtx);
JXPathContext createExceptionTaskWSResponseCtx = JXPathContext.newContext(createExceptionTaskWSResponse);
varMap.put("createExceptionTaskWSResponse", createExceptionTaskWSResponseCtx);
JXPathContext createExceptionTaskWSRequestCtx = JXPathContext.newContext(createExceptionTaskWSRequest);
varMap.put("createExceptionTaskWSRequest", createExceptionTaskWSRequestCtx);
JXPathContext payloadCtx = JXPathContext.newContext(payload);
varMap.put("payload", payloadCtx);
JXPathContext checkProcessabilityWSResponseCtx = JXPathContext.newContext(checkProcessabilityWSResponse);
varMap.put("checkProcessabilityWSResponse", checkProcessabilityWSResponseCtx);
JXPathContext checkProcessabilityWSRequestCtx = JXPathContext.newContext(checkProcessabilityWSRequest);
varMap.put("checkProcessabilityWSRequest", checkProcessabilityWSRequestCtx);
JXPathContext handleRequestWSResponseCtx = JXPathContext.newContext(handleRequestWSResponse);
varMap.put("handleRequestWSResponse", handleRequestWSResponseCtx);
JXPathContext handleRequestWSRequestCtx = JXPathContext.newContext(handleRequestWSRequest);
varMap.put("handleRequestWSRequest", handleRequestWSRequestCtx);
JXPathContext validCtx = JXPathContext.newContext(valid);
varMap.put("valid", validCtx);
JXPathContext classifyRequestWSResponseCtx = JXPathContext.newContext(classifyRequestWSResponse);
varMap.put("classifyRequestWSResponse", classifyRequestWSResponseCtx);
JXPathContext classifyRequestWSRequestCtx = JXPathContext.newContext(classifyRequestWSRequest);
varMap.put("classifyRequestWSRequest", classifyRequestWSRequestCtx);
JXPathContext requestTypeCtx = JXPathContext.newContext(requestType);
varMap.put("requestType", requestTypeCtx);
JXPathContext createManualTaskWSResponseCtx = JXPathContext.newContext(createManualTaskWSResponse);
varMap.put("createManualTaskWSResponse", createManualTaskWSResponseCtx);
JXPathContext createManualTaskWSRequestCtx = JXPathContext.newContext(createManualTaskWSRequest);
varMap.put("createManualTaskWSRequest", createManualTaskWSRequestCtx);
}

v0

'HandleService'

('handleRequest'

'PrepareHandleRequest'
{
reinject = "N";
service = "handleRequest";
ok = "Ok";
payload = handleRequestInput.parameters.payload;
}

| 'handleComplexRequest'

'PrepareHandleComplexRequest'
{
reinject = "N";
service = "handleComplexRequest";
ok = "Ok";
payload = handleComplexRequestInput.parameters.payload;
}

| 'rejectRequest'

'PrepareRejectRequest'
{
reinject = "N";
service = "rejectRequest";
ok = "Ok";
payload = rejectRequestInput.parameters.payload;
}

| 'reinjectRequest'

'PrepareReinjectRequest'
{
reinject = "Y";
service = reinjectRequestInput.parameters.service;
ok = "Ok";
payload = reinjectRequestInput.parameters.payload;
}
)

( 'HandleService' { service.equals("handleRequest") }?

'PrepareClassifyRequest'
{
classifyRequest.requestInput.payload = "impl:payload";

classifyRequestWSRequest.parameters.requestInput.payload = payload;
}
'ClassifyRequestWS'
{catchExceptionPoint = "ClassifyRequestWS";}
( |

'PrepareExceptionTask'
{
createExceptionTask.requestInput.exceptionPoint = "impl:exceptionPoint";
createExceptionTask.requestInput.payload = "impl:payload";
createExceptionTask.requestInput.triggerEvent = "impl:triggerEvent";

createExceptionTaskWSRequest.parameters.requestInput.triggerEvent = service;
}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

'AssignRequestType'
{
requestType = classifyRequestWSResponse.parameters.classifyRequestReturn.value;
}

( 'IfStandardRequest' { requestType.equals("S") }?

'PrepareCheckProcessability'
{
checkProcessability.requestInput.payload = "impl:payload";

checkProcessabilityWSRequest.parameters.requestInput.payload = payload;
}
'CheckProcessabilityWS'
{catchExceptionPoint = "CheckProcessabilityWS";}
( |

'PrepareExceptionTask'
{
createExceptionTask.requestInput.exceptionPoint = "impl:exceptionPoint";
createExceptionTask.requestInput.payload = "impl:payload";
createExceptionTask.requestInput.triggerEvent = "impl:triggerEvent";

createExceptionTaskWSRequest.parameters.requestInput.triggerEvent = service;
}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

'AssignValid'
{
valid = checkProcessabilityWSResponse.parameters.checkProcessabilityReturn.value;
}

( 'IfValid' { valid.equals("V") }?

'PrepareProcessRequest'
{
processRequest.requestInput.payload = "impl:payload";

handleRequestWSRequest.parameters.requestInput.payload = payload;
}
'ProcessRequestWS'
{catchExceptionPoint = "ProcessRequestWS";}
( |

'PrepareExceptionTask'
{
createExceptionTask.requestInput.exceptionPoint = "impl:exceptionPoint";
createExceptionTask.requestInput.payload = "impl:payload";
createExceptionTask.requestInput.triggerEvent = "impl:triggerEvent";

createExceptionTaskWSRequest.parameters.requestInput.triggerEvent = service;
}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

| 'else' { !valid.equals("V") }?

'PrepareRejectReq'
{
rejectRequestWS.requestInput.payload = "impl:payload";

rejectRequestWSReq.parameters.requestInput.payload = payload;
}
'RejectRequestWS'
{catchExceptionPoint = "RejectRequestWS";}
( |

'PrepareExceptionTask'
{
createExceptionTask.requestInput.exceptionPoint = "impl:exceptionPoint";
createExceptionTask.requestInput.payload = "impl:payload";
createExceptionTask.requestInput.triggerEvent = "impl:triggerEvent";

createExceptionTaskWSRequest.parameters.requestInput.triggerEvent = service;
}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )
)

| 'else' { !requestType.equals("S") }?

'PrepareCreateManualTask'
{
createManualTask.requestInput.payload = "impl:payload";

createManualTaskWSRequest.parameters.requestInput.payload = payload;
}
'CreateManualTaskWS'
{catchExceptionPoint = "CreateManualTaskWS";}
( |

'PrepareExceptionTask'
{
createExceptionTask.requestInput.exceptionPoint = "impl:exceptionPoint";
createExceptionTask.requestInput.payload = "impl:payload";
createExceptionTask.requestInput.triggerEvent = "impl:triggerEvent";

createExceptionTaskWSRequest.parameters.requestInput.triggerEvent = service;
}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )
)

( 'NotReinjectHandleRequest' { reinject.equals("N") }?

'PrepareHandleRequestReply'
{
handleRequestResponse.result = "tns:result";

handleRequestOutput.parameters.result = ok;
}

'HandleRequestReply'
| { !reinject.equals("N") }? )

| ( 'elseif' { service.equals("handleComplexRequest") }?

'PrepareCheckProcessability'
{
checkProcessability.requestInput.payload = "impl:payload";

checkProcessabilityWSRequest.parameters.requestInput.payload = payload;
}
'CheckProcessabilityWS'
{catchExceptionPoint = "CheckProcessabilityWS";}
( |

'PrepareExceptionTask'
{
createExceptionTask.requestInput.exceptionPoint = "impl:exceptionPoint";
createExceptionTask.requestInput.payload = "impl:payload";
createExceptionTask.requestInput.triggerEvent = "impl:triggerEvent";

createExceptionTaskWSRequest.parameters.requestInput.triggerEvent = service;
}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

'AssignValid'
{
valid = checkProcessabilityWSResponse.parameters.checkProcessabilityReturn.value;
}

( 'IfValidComplex' { valid.equals("V") }?

'PrepareProcessRequest'
{
processRequest.requestInput.payload = "impl:payload";

handleRequestWSRequest.parameters.requestInput.payload = payload;
}
'ProcessRequestWS'
{catchExceptionPoint = "ProcessRequestWS";}
( |

'PrepareExceptionTask'
{
createExceptionTask.requestInput.exceptionPoint = "impl:exceptionPoint";
createExceptionTask.requestInput.payload = "impl:payload";
createExceptionTask.requestInput.triggerEvent = "impl:triggerEvent";

createExceptionTaskWSRequest.parameters.requestInput.triggerEvent = service;
}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

| 'else' { !valid.equals("V") }?

'PrepareRejectReq'
{
rejectRequestWS.requestInput.payload = "impl:payload";

rejectRequestWSReq.parameters.requestInput.payload = payload;
}
'RejectRequestWS'
{catchExceptionPoint = "RejectRequestWS";}
( |

'PrepareExceptionTask'
{
createExceptionTask.requestInput.exceptionPoint = "impl:exceptionPoint";
createExceptionTask.requestInput.payload = "impl:payload";
createExceptionTask.requestInput.triggerEvent = "impl:triggerEvent";

createExceptionTaskWSRequest.parameters.requestInput.triggerEvent = service;
}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )
)

( 'NotReinjectHandleComplexRequest' { reinject.equals("N") }?

'PrepareHandleComplexRequestReply'
{
handleComplexRequestResponse.result = "tns:result";

handleComplexRequestOutput.parameters.result = ok;
}

'HandleComplexRequestReply'
| { !reinject.equals("N") }? )
)

| ( 'elseif' { service.equals("rejectRequest") }?

'PrepareInvokeRejectRequest'
{
rejectRequestWS.requestInput.payload = "impl:payload";

rejectRequestWSReq.parameters.requestInput.payload = payload;
}
'InvokeRejectRequestWS'
{catchExceptionPoint = "InvokeRejectRequestWS";}
( |

'PrepareExceptionTask'
{
createExceptionTask.requestInput.exceptionPoint = "impl:exceptionPoint";
createExceptionTask.requestInput.payload = "impl:payload";
createExceptionTask.requestInput.triggerEvent = "impl:triggerEvent";

createExceptionTaskWSRequest.parameters.requestInput.triggerEvent = service;
}
'InvokeCreateExceptionTask'

'StopProcess'

 exit )

( 'NotReinjectRejectRequest' { reinject.equals("N") }?

'PrepareRejectRequestReply'
{
rejectRequestResponse.result = "tns:result";

rejectRequestOutput.parameters.result = ok;
}

'RejectRequestReply'
| { !reinject.equals("N") }? )
)

| 'else' { !service.equals("rejectRequest") }?

'UnknownRequest'
{
ok = "Error";
}
)

( 'IfReinject' { reinject.equals("Y") }?

'PrepareReinjectRequestReply'
{
reinjectRequestResponse.result = "tns:result";

reinjectRequestOutput.parameters.result = ok;
}

'ReinjectRequestReply'
| { !reinject.equals("Y") }? )
v;

v0 : '(' kvpi (',' kvpi) + ')' ;

v :  '(' kvpo (',' kvpo) + ')'
{
  if (!Utils.verify(vMap, varMap)) {
     System.out.println("ERROR: unexpected output");
  }
};

kvpi : '<' key ',' value '>'
{
Utils.setVarValue($key.text, Utils.trimQuote($value.text), varMap);
};

kvpo : '<' key ',' value '>'
{
vMap.put($key.text, $value.text);
};

exit: v
{ throw new ParseCatchException(catchExceptionPoint); };
key : varname ;
value : STRING ;
index : '[' NUMBER ']' ;
varname  : (LETTERS | ALFA) (LETTERS | NUMBER | ALFA | index)* ;
LETTERS : ('a' .. 'z' | 'A' .. 'Z') + ;
NUMBER  : ('1' .. '9') + ;
ALFA : ('_' | '.') + ;
INT  : ([0-9|?])+ ;
STRING : '\'' .*? '\'';
WS  : [ \t\r\n]+ -> skip ;
