<!-- HandleRequest BPEL Process [Generated by the Eclipse BPEL Designer] -->
<!-- Date: Fri Aug 24 16:10:02 CEST 2018 -->
<bpel:process name="HandleRequest"
         targetNamespace="http://handerequest.ws.ou"
         suppressJoinFailure="yes"
         xmlns:tns="http://handerequest.ws.ou"
         xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns1="http://www.w3.org/2001/XMLSchema" xmlns:ns="http://request.ws.ou">

    <!-- Import the client WSDL -->
    <bpel:import namespace="http://request.ws.ou" location="HandleRequestWS.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"></bpel:import>
    <bpel:import location="HandleRequestArtifacts.wsdl" namespace="http://handerequest.ws.ou" 
	        importType="http://schemas.xmlsoap.org/wsdl/" />
         
    <!-- ================================================================= -->         
    <!-- PARTNERLINKS                                                      -->
    <!-- List of services participating in this BPEL process               -->
    <!-- ================================================================= -->         
    <bpel:partnerLinks>
        <!-- The 'client' role represents the requester of this service. -->
        <bpel:partnerLink name="client"
                     partnerLinkType="tns:HandleRequest"
                     myRole="HandleRequestProvider"
                     />
        <bpel:partnerLink name="HandleRequestWSPL" partnerLinkType="tns:HandleRequestWSPLType" partnerRole="HandleRequestWSPLRole"></bpel:partnerLink>
    </bpel:partnerLinks>
  
    <!-- ================================================================= -->         
    <!-- VARIABLES                                                         -->
    <!-- List of messages and XML documents used within this BPEL process  -->
    <!-- ================================================================= -->         
    <bpel:variables>
        <!-- Reference to the message passed as input during initiation -->
        <bpel:variable name="handleRequestInput"
                  messageType="tns:HandleRequestRequestMessage"/>
                  
        <!-- 
          Reference to the message that will be returned to the requester
          -->
        <bpel:variable name="handleRequestOutput"
                  messageType="tns:HandleRequestResponseMessage"/>
        <bpel:variable name="reinject" type="ns1:string"></bpel:variable>
        <bpel:variable name="service" type="ns1:string"></bpel:variable>
        <bpel:variable name="ok" type="ns1:string"></bpel:variable>
        <bpel:variable name="handleComplexRequestInput" messageType="tns:handleComplexRequestRequest"></bpel:variable>
        <bpel:variable name="handleComplexRequestOutput" messageType="tns:handleComplexRequestResponse"></bpel:variable>
        <bpel:variable name="rejectRequestInput" messageType="tns:rejectRequestRequest"></bpel:variable>
        <bpel:variable name="rejectRequestOutput" messageType="tns:rejectRequestResponse"></bpel:variable>
        <bpel:variable name="reinjectRequestInput" messageType="tns:reinjectRequestRequest"></bpel:variable>
        <bpel:variable name="reinjectRequestOutput" messageType="tns:reinjectRequestResponse"></bpel:variable>
        <bpel:variable name="rejectRequestWSResp" messageType="ns:rejectRequestWSResponse"></bpel:variable>
        <bpel:variable name="rejectRequestWSReq" messageType="ns:rejectRequestWSRequest"></bpel:variable>
        <bpel:variable name="exception" messageType="ns:WsException"></bpel:variable>
        <bpel:variable name="createExceptionTaskWSResponse" messageType="ns:createExceptionTaskResponse"></bpel:variable>
        <bpel:variable name="createExceptionTaskWSRequest" messageType="ns:createExceptionTaskRequest"></bpel:variable>
        <bpel:variable name="payload" type="ns1:string"></bpel:variable>
        <bpel:variable name="checkProcessabilityWSResponse" messageType="ns:checkProcessabilityResponse"></bpel:variable>
        <bpel:variable name="checkProcessabilityWSRequest" messageType="ns:checkProcessabilityRequest"></bpel:variable>
        <bpel:variable name="handleRequestWSResponse" messageType="ns:processRequestResponse"></bpel:variable>
        <bpel:variable name="handleRequestWSRequest" messageType="ns:processRequestRequest"></bpel:variable>
        <bpel:variable name="valid" type="ns1:string"></bpel:variable>
        <bpel:variable name="classifyRequestWSResponse" messageType="ns:classifyRequestResponse"></bpel:variable>
        <bpel:variable name="classifyRequestWSRequest" messageType="ns:classifyRequestRequest"></bpel:variable>
        <bpel:variable name="requestType" type="ns1:string"></bpel:variable>
        <bpel:variable name="createManualTaskWSResponse" messageType="ns:createManualTaskResponse"></bpel:variable>
        <bpel:variable name="createManualTaskWSRequest" messageType="ns:createManualTaskRequest"></bpel:variable>
    </bpel:variables>

    <!-- ================================================================= -->         
    <!-- ORCHESTRATION LOGIC                                               -->
    <!-- Set of activities coordinating the flow of messages across the    -->
    <!-- services integrated within this business process                  -->
    <!-- ================================================================= -->         
    <bpel:sequence name="RequestHandler">
        
        <!-- Receive input from requester. 
             Note: This maps to operation defined in HandleRequest.wsdl 
             -->
        
        <bpel:pick name="HandleService" createInstance="yes">
            <bpel:onMessage partnerLink="client" operation="handleRequest" portType="tns:HandleRequest" variable="handleRequestInput">
                <bpel:assign validate="no" name="PrepareHandleRequest">
                    <bpel:copy>
                        <bpel:from>
                            <bpel:literal xml:space="preserve">N</bpel:literal>
                        </bpel:from>
                        <bpel:to variable="reinject"></bpel:to>
                    </bpel:copy>
                    <bpel:copy>
                        <bpel:from>
                            <bpel:literal xml:space="preserve">handleRequest</bpel:literal>
                        </bpel:from>
                        <bpel:to variable="service"></bpel:to>
                    </bpel:copy>
                    
                    
                    
                    <bpel:copy>
                        <bpel:from>
                            <bpel:literal xml:space="preserve">Ok</bpel:literal>
                        </bpel:from>
                        <bpel:to variable="ok"></bpel:to>
                    </bpel:copy>
                    <bpel:copy>
                        <bpel:from part="parameters" variable="handleRequestInput">
                            <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
                                <![CDATA[tns:payload]]>
                            </bpel:query>
                        </bpel:from>
                        <bpel:to variable="payload"></bpel:to>
                    </bpel:copy>
                </bpel:assign>
            </bpel:onMessage>
            <bpel:onMessage partnerLink="client" operation="handleComplexRequest" portType="tns:HandleRequest" variable="handleComplexRequestInput">
                <bpel:assign validate="no" name="PrepareHandleComplexRequest">
                    <bpel:copy>
                        <bpel:from>
                            <bpel:literal xml:space="preserve">N</bpel:literal>
                        </bpel:from>
                        <bpel:to variable="reinject"></bpel:to>
                    </bpel:copy>
                    <bpel:copy>
                        <bpel:from>
                            <bpel:literal xml:space="preserve">handleComplexRequest</bpel:literal>
                        </bpel:from>
                        <bpel:to variable="service"></bpel:to>
                    </bpel:copy>
                    
                    <bpel:copy>
                        <bpel:from>
                            <bpel:literal xml:space="preserve">Ok</bpel:literal>
                        </bpel:from>
                        <bpel:to variable="ok"></bpel:to>
                    </bpel:copy>
                    <bpel:copy>
                        <bpel:from part="parameters" variable="handleComplexRequestInput">
                            <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:payload]]></bpel:query>
                        </bpel:from>
                        <bpel:to variable="payload"></bpel:to>
                    </bpel:copy>
                </bpel:assign>
            </bpel:onMessage>
            <bpel:onMessage partnerLink="client" operation="rejectRequest" portType="tns:HandleRequest" variable="rejectRequestInput">
                <bpel:assign validate="no" name="PrepareRejectRequest">
                    <bpel:copy>
                        <bpel:from>
                            <bpel:literal xml:space="preserve">N</bpel:literal>
                        </bpel:from>
                        <bpel:to variable="reinject"></bpel:to>
                    </bpel:copy>
                    <bpel:copy>
                        <bpel:from>
                            <bpel:literal xml:space="preserve">rejectRequest</bpel:literal>
                        </bpel:from>
                        <bpel:to variable="service"></bpel:to>
                    </bpel:copy>
                    
                    <bpel:copy>
                        <bpel:from>
                            <bpel:literal xml:space="preserve">Ok</bpel:literal>
                        </bpel:from>
                        <bpel:to variable="ok"></bpel:to>
                    </bpel:copy>
                    <bpel:copy>
                        <bpel:from part="parameters" variable="rejectRequestInput">
                            <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:payload]]></bpel:query>
                        </bpel:from>
                        <bpel:to variable="payload"></bpel:to>
                    </bpel:copy>
                </bpel:assign>
            </bpel:onMessage>
            <bpel:onMessage partnerLink="client" operation="reinjectRequest" portType="tns:HandleRequest" variable="reinjectRequestInput">
                <bpel:assign validate="no" name="PrepareReinjectRequest">
                    <bpel:copy>
                        <bpel:from>
                            <bpel:literal xml:space="preserve">Y</bpel:literal>
                        </bpel:from>
                        <bpel:to variable="reinject"></bpel:to>
                    </bpel:copy>
                    
                    
                    
                    <bpel:copy>
                        <bpel:from part="parameters" variable="reinjectRequestInput">
                            <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:service]]></bpel:query>
                        </bpel:from>
                        <bpel:to variable="service"></bpel:to>
                    </bpel:copy>
                    
                    <bpel:copy>
                        <bpel:from>
                            <bpel:literal xml:space="preserve">Ok</bpel:literal>
                        </bpel:from>
                        <bpel:to variable="ok"></bpel:to>
                    </bpel:copy>
                    <bpel:copy>
                        <bpel:from part="parameters" variable="reinjectRequestInput">
                            <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:payload]]></bpel:query>
                        </bpel:from>
                        <bpel:to variable="payload"></bpel:to>
                    </bpel:copy>
                </bpel:assign>
            </bpel:onMessage>
        </bpel:pick>
        
        
        <!-- Generate reply to synchronous request -->
        
        
        <bpel:if name="HandleService">
            <bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[$service='handleRequest']]></bpel:condition>
            <bpel:sequence name="HandleRequestSequence">
                <bpel:sequence name="InvokeClassifyRequest">
	                <bpel:assign validate="no" name="PrepareClassifyRequest">
	                	<bpel:copy>
	                    	<bpel:from><bpel:literal><impl:classifyRequest xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
							  	<impl:requestInput>
								    <impl:payload>impl:payload</impl:payload>
								</impl:requestInput>
								</impl:classifyRequest>
								</bpel:literal></bpel:from>
	                        <bpel:to variable="classifyRequestWSRequest" part="parameters"></bpel:to>
	                    </bpel:copy>
	                    <bpel:copy>
	                    	<bpel:from variable="payload"></bpel:from>
	                        <bpel:to part="parameters" variable="classifyRequestWSRequest">
	                            <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:requestInput/ns:payload]]></bpel:query>
	                        </bpel:to>
	                    </bpel:copy>
                    </bpel:assign>
	                <bpel:invoke name="ClassifyRequestWS" partnerLink="HandleRequestWSPL" operation="classifyRequest" portType="ns:HandleRequestWS" inputVariable="classifyRequestWSRequest" outputVariable="classifyRequestWSResponse">
	       	        	<bpel:catch faultName="ns:WsException" faultVariable="exception" faultMessageType="ns:WsException">
	                    	<bpel:sequence name="CreateExceptionTask">
	                        	<bpel:assign validate="no" name="PrepareExceptionTask">
		                        	<bpel:copy>
		                            	<bpel:from><bpel:literal><impl:createExceptionTask xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
											<impl:requestInput>
											<impl:exceptionPoint>impl:exceptionPoint</impl:exceptionPoint>
											<impl:payload>impl:payload</impl:payload>
											<impl:triggerEvent>impl:triggerEvent</impl:triggerEvent>
											</impl:requestInput>
											</impl:createExceptionTask>
											</bpel:literal>
										</bpel:from>
	                                    <bpel:to variable="createExceptionTaskWSRequest" part="parameters"></bpel:to>
	                              	</bpel:copy>
	                                    
	                                <bpel:copy>
	                                   	<bpel:from variable="service"></bpel:from>
	                                   	<bpel:to part="parameters" variable="createExceptionTaskWSRequest">
	                                       	<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
	                                                <![CDATA[ns:requestInput/ns:triggerEvent]]>
	                                            	</bpel:query>
	                                   	</bpel:to>
	                                </bpel:copy>
                               </bpel:assign>
                               
                               <bpel:invoke name="InvokeCreateExceptionTask" partnerLink="HandleRequestWSPL" operation="createExceptionTask" portType="ns:HandleRequestWS" inputVariable="createExceptionTaskWSRequest" outputVariable="createExceptionTaskWSResponse"></bpel:invoke>
                               <bpel:throw name="StopProcess"></bpel:throw>
                            </bpel:sequence>
                        </bpel:catch>
                	</bpel:invoke>

                    <bpel:assign validate="no" name="AssignRequestType">
                        <bpel:copy>
                            <bpel:from part="parameters" variable="classifyRequestWSResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:classifyRequestReturn/ns:value]]></bpel:query>
                            </bpel:from>
                            <bpel:to variable="requestType"></bpel:to>
                        </bpel:copy>
                    </bpel:assign>
          		</bpel:sequence>
          		<!-- "InvokeClassifyRequest"> -->
          		
                <bpel:if name="IfStandardRequest">
                    <bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[$requestType='S']]></bpel:condition>
                    <bpel:sequence name="HandleStandardRequest">
                        <bpel:sequence name="InvokeCheckProcessability">
                        	<bpel:assign validate="no" name="PrepareCheckProcessability">
                                <bpel:copy>
	                                <bpel:from><bpel:literal><impl:checkProcessability xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										  <impl:requestInput>
										    <impl:payload>impl:payload</impl:payload>
										  </impl:requestInput>
										</impl:checkProcessability>
										</bpel:literal>
									</bpel:from>
	                                <bpel:to variable="checkProcessabilityWSRequest" part="parameters"></bpel:to>
                            	</bpel:copy>
                            	
                            	<bpel:copy>
	                                <bpel:from variable="payload"></bpel:from>
	                                <bpel:to part="parameters" variable="checkProcessabilityWSRequest">
	                                        <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
	                                            <![CDATA[ns:requestInput/ns:payload]]>
	                                        </bpel:query>
                                    </bpel:to>
	                            </bpel:copy>
                        	</bpel:assign>
                        	
                        	<bpel:invoke name="CheckProcessabilityWS" partnerLink="HandleRequestWSPL" operation="checkProcessability" portType="ns:HandleRequestWS" inputVariable="checkProcessabilityWSRequest" outputVariable="checkProcessabilityWSResponse">
                            <bpel:catch faultName="ns:WsException" faultVariable="exception" faultMessageType="ns:WsException">
                                <bpel:sequence name="CreateExceptionTask">
                                	<bpel:assign validate="no" name="PrepareExceptionTask">
		                                <bpel:copy>
	    	                                <bpel:from>
	    	                                	<bpel:literal><impl:createExceptionTask xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
												  <impl:requestInput>
												    <impl:exceptionPoint>impl:exceptionPoint</impl:exceptionPoint>
												    <impl:payload>impl:payload</impl:payload>
												    <impl:triggerEvent>impl:triggerEvent</impl:triggerEvent>
												  </impl:requestInput>
												</impl:createExceptionTask>
												</bpel:literal></bpel:from>
	                                       	<bpel:to variable="createExceptionTaskWSRequest" part="parameters"></bpel:to>
	                               	   	</bpel:copy>
	                                            
	                                    <bpel:copy>
	                                        <bpel:from variable="service"></bpel:from>
	                                        <bpel:to part="parameters" variable="createExceptionTaskWSRequest">
	                                                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
	                                                        <![CDATA[ns:requestInput/ns:triggerEvent]]>
	                                                    </bpel:query>
	                                        </bpel:to>
	                                    </bpel:copy>
                                	</bpel:assign>
                                
                                	<bpel:invoke name="InvokeCreateExceptionTask" partnerLink="HandleRequestWSPL" operation="createExceptionTask" portType="ns:HandleRequestWS" inputVariable="createExceptionTaskWSRequest" outputVariable="createExceptionTaskWSResponse"></bpel:invoke>
                                	<bpel:throw name="StopProcess"></bpel:throw>
                            
                        		</bpel:sequence>
                        	</bpel:catch>
                        	</bpel:invoke>
    
                            <bpel:assign validate="no" name="AssignValid">
	                            <bpel:copy>
	                                <bpel:from part="parameters" variable="checkProcessabilityWSResponse">
	                                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:checkProcessabilityReturn/ns:value]]></bpel:query>
	                                </bpel:from>
	                                <bpel:to variable="valid"></bpel:to>
	                            </bpel:copy>
	                        </bpel:assign>
                            
                  		</bpel:sequence>
                        
                        <bpel:if name="IfValid">
                            <bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[$valid='V']]></bpel:condition>
                            <bpel:sequence name="InvokeProcessRequest">
	                            
	                            	<bpel:assign validate="no" name="PrepareProcessRequest">
		                                <bpel:copy>
	    	                                <bpel:from>
	    	                                	<bpel:literal><impl:processRequest xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
												  <impl:requestInput>
												    <impl:payload>impl:payload</impl:payload>
												  </impl:requestInput>
												</impl:processRequest>
												</bpel:literal>
											</bpel:from>
	                                    	<bpel:to variable="handleRequestWSRequest" part="parameters"></bpel:to>
	                                	</bpel:copy>
	                                	
	                                	<bpel:copy>
	                                    	<bpel:from variable="payload"></bpel:from>
	                                    	<bpel:to part="parameters" variable="handleRequestWSRequest">
	                                        	<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:requestInput/ns:payload]]></bpel:query>
	                                    	</bpel:to>
	                                	</bpel:copy>
	                            	</bpel:assign>
	                            	
	                            	<bpel:invoke name="ProcessRequestWS" partnerLink="HandleRequestWSPL" operation="processRequest" portType="ns:HandleRequestWS" inputVariable="handleRequestWSRequest" outputVariable="handleRequestWSResponse">
	                            	<bpel:catch faultName="ns:WsException" faultVariable="exception" faultMessageType="ns:WsException">
	                                	<bpel:sequence name="CreateExceptionTask">
	                                		<bpel:assign validate="no" name="PrepareExceptionTask">
	                                            
	                                            <bpel:copy>
	                                        		<bpel:from>
	                                        			<bpel:literal><impl:createExceptionTask xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
														  <impl:requestInput>
														    <impl:exceptionPoint>impl:exceptionPoint</impl:exceptionPoint>
														    <impl:payload>impl:payload</impl:payload>
														    <impl:triggerEvent>impl:triggerEvent</impl:triggerEvent>
														  </impl:requestInput>
														</impl:createExceptionTask>
														</bpel:literal>
													</bpel:from>
	                                        		<bpel:to variable="createExceptionTaskWSRequest" part="parameters"></bpel:to>
	                                    		</bpel:copy>
	                                    		
			                                    <bpel:copy>
			                                        <bpel:from variable="service"></bpel:from>
			                                        <bpel:to part="parameters" variable="createExceptionTaskWSRequest">
			                                                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
			                                                        <![CDATA[ns:requestInput/ns:triggerEvent]]>
			                                                    </bpel:query>
	                                                </bpel:to>
			                                    </bpel:copy>
			                                </bpel:assign>
			                                
	                                		<bpel:invoke name="InvokeCreateExceptionTask" partnerLink="HandleRequestWSPL" operation="createExceptionTask" portType="ns:HandleRequestWS" inputVariable="createExceptionTaskWSRequest" outputVariable="createExceptionTaskWSResponse"></bpel:invoke>
	                                		<bpel:throw name="StopProcess"></bpel:throw>              
	                            	    </bpel:sequence>
	                            	</bpel:catch>
	 	                       		</bpel:invoke>
	                      		</bpel:sequence>
                      		<!-- "InvokeProcessRequest"> -->
	                        
                 		<bpel:else>
                    		<bpel:sequence name="InvokeRejectRequest">
	                        		<bpel:assign validate="no" name="PrepareRejectReq">
	
	                                    <bpel:copy>
	                                        <bpel:from>
	                                        	<bpel:literal><impl:rejectRequestWS xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
													  <impl:requestInput>
													    <impl:payload>impl:payload</impl:payload>
													  </impl:requestInput>
													</impl:rejectRequestWS>
													</bpel:literal>
											</bpel:from>
	                                        <bpel:to variable="rejectRequestWSReq" part="parameters"></bpel:to>
	                                    </bpel:copy>
	                                    
	                                    <bpel:copy>
	                                        <bpel:from variable="payload"></bpel:from>
	                                        <bpel:to part="parameters" variable="rejectRequestWSReq">
	                                            <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:requestInput/ns:payload]]></bpel:query>
	                                        </bpel:to>
	                                    </bpel:copy>
	                                    
	                                </bpel:assign>
	                                
	                                <bpel:invoke name="RejectRequestWS" partnerLink="HandleRequestWSPL" operation="rejectRequestWS" portType="ns:HandleRequestWS" inputVariable="rejectRequestWSReq" outputVariable="rejectRequestWSResp">
	                            	<bpel:catch faultName="ns:WsException" faultVariable="exception" faultMessageType="ns:WsException">
	                                	<bpel:sequence name="CreateExceptionTask">
	                                		<bpel:assign validate="no" name="PrepareExceptionTask">
	                                        	<bpel:copy>
	                                            	<bpel:from>
	                                            		<bpel:literal><impl:createExceptionTask xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
															  <impl:requestInput>
															    <impl:exceptionPoint>impl:exceptionPoint</impl:exceptionPoint>
															    <impl:payload>impl:payload</impl:payload>
															    <impl:triggerEvent>impl:triggerEvent</impl:triggerEvent>
															  </impl:requestInput>
															</impl:createExceptionTask>
														</bpel:literal>
													</bpel:from>
	                                                <bpel:to variable="createExceptionTaskWSRequest" part="parameters"></bpel:to>
	                                         	</bpel:copy>
	                                                
			                                    <bpel:copy>
	        		                                <bpel:from variable="service"></bpel:from>
	                		                        <bpel:to part="parameters" variable="createExceptionTaskWSRequest">
	                                                        <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
	                                                            <![CDATA[ns:requestInput/ns:triggerEvent]]>
	                                                        </bpel:query>
	                                                </bpel:to>
	                        		            </bpel:copy>
	                                		</bpel:assign>
	                                		
			                                <bpel:invoke name="InvokeCreateExceptionTask" partnerLink="HandleRequestWSPL" operation="createExceptionTask" portType="ns:HandleRequestWS" inputVariable="createExceptionTaskWSRequest" outputVariable="createExceptionTaskWSResponse"></bpel:invoke>
	        		                        <bpel:throw name="StopProcess"></bpel:throw>
	                           
	                	                </bpel:sequence>
	                            </bpel:catch>
	                        	</bpel:invoke>
	                   		</bpel:sequence>
                   		</bpel:else>
                   		</bpel:if>
                   	</bpel:sequence>	
            
        		<bpel:else>
                	<bpel:sequence name="CreateManualTask">
                    	<bpel:sequence name="InvokeCreateManualTask">
                        	<bpel:assign validate="no" name="PrepareCreateManualTask">
                             	<bpel:copy>
                                	<bpel:from>
                                    	<bpel:literal><impl:createManualTask xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
												  <impl:requestInput>
												    <impl:payload>impl:payload</impl:payload>
												  </impl:requestInput>
												</impl:createManualTask>
												</bpel:literal>
									</bpel:from>
                                    <bpel:to variable="createManualTaskWSRequest" part="parameters"></bpel:to>
                             	</bpel:copy>
                                    
                                <bpel:copy>
                                	<bpel:from variable="payload"></bpel:from>
                                    <bpel:to part="parameters" variable="createManualTaskWSRequest">
                                            <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:requestInput/ns:payload]]></bpel:query>
                                    </bpel:to>
                                </bpel:copy>
                          	</bpel:assign>
                          	
                          	<bpel:invoke name="CreateManualTaskWS" partnerLink="HandleRequestWSPL" operation="createManualTask" portType="ns:HandleRequestWS" inputVariable="createManualTaskWSRequest" outputVariable="createManualTaskWSResponse">
                            <bpel:catch faultName="ns:WsException" faultVariable="exception" faultMessageType="ns:WsException">
                                <bpel:sequence name="CreateExceptionTask">
                                	<bpel:assign validate="no" name="PrepareExceptionTask">
                                    	<bpel:copy>
                                        	<bpel:from>
                                        		<bpel:literal>
                                        			<impl:createExceptionTask xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
														  <impl:requestInput>
														    <impl:exceptionPoint>impl:exceptionPoint</impl:exceptionPoint>
														    <impl:payload>impl:payload</impl:payload>
														    <impl:triggerEvent>impl:triggerEvent</impl:triggerEvent>
														  </impl:requestInput>
														</impl:createExceptionTask>
												</bpel:literal>
											</bpel:from>
                                            <bpel:to variable="createExceptionTaskWSRequest" part="parameters"></bpel:to>
                                     	</bpel:copy>
                                            
	                                    <bpel:copy>
    	                                    <bpel:from variable="service"></bpel:from>
        	                                <bpel:to part="parameters" variable="createExceptionTaskWSRequest">
                                                        <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
                                                            <![CDATA[ns:requestInput/ns:triggerEvent]]>
                                                        </bpel:query>
                	                      	</bpel:to>
            	                		</bpel:copy>
                                	</bpel:assign>
                                
                                	<bpel:invoke name="InvokeCreateExceptionTask" partnerLink="HandleRequestWSPL" operation="createExceptionTask" portType="ns:HandleRequestWS" inputVariable="createExceptionTaskWSRequest" outputVariable="createExceptionTaskWSResponse"></bpel:invoke>
                                	<bpel:throw name="StopProcess"></bpel:throw>
                            
                        		</bpel:sequence>
                            </bpel:catch>
                        	</bpel:invoke>
    					</bpel:sequence>
    					<!-- "InvokeCreateManualTask"> -->
                            
                   	</bpel:sequence>
                   	<!-- "CreateManualTask"> -->
                </bpel:else>
                </bpel:if>
                
                <bpel:if name="NotReinjectHandleRequest">
                    <bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[$reinject='N']]></bpel:condition>
                    <bpel:sequence name="Reply">
                        <bpel:assign validate="no" name="PrepareHandleRequestReply">
                    		<bpel:copy>
                        		<bpel:from>
                        			<bpel:literal><tns:HandleRequestResponse xmlns:tns="http://handerequest.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  										<tns:result>tns:result</tns:result>
										</tns:HandleRequestResponse>
									</bpel:literal>
								</bpel:from>
                        		<bpel:to variable="handleRequestOutput" part="parameters"></bpel:to>
                    		</bpel:copy>
                    
                    		<bpel:copy>
                        		<bpel:from variable="ok"></bpel:from>
                        		<bpel:to part="parameters" variable="handleRequestOutput">
                            		<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:result]]></bpel:query>
                        		</bpel:to>
                    		</bpel:copy>
                        </bpel:assign>
                        
                        <bpel:reply name="HandleRequestReply" partnerLink="client" operation="handleRequest" portType="tns:HandleRequest" variable="handleRequestOutput"></bpel:reply>
                    </bpel:sequence>
                </bpel:if>
        	</bpel:sequence>
            <!-- "HandleRequestSequence"> -->
            
            <bpel:elseif>
                <bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[$service='handleComplexRequest']]></bpel:condition>
                <bpel:sequence name="HandleComplexRequestSequence">
                    
                    <bpel:sequence name="InvokeCheckProcessability">
                        <bpel:assign validate="no" name="PrepareCheckProcessability">
                        
                    
                            <bpel:copy>
                                <bpel:from><bpel:literal><impl:checkProcessability xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <impl:requestInput>
    <impl:payload>impl:payload</impl:payload>
  </impl:requestInput>
</impl:checkProcessability>
</bpel:literal></bpel:from>
                                <bpel:to variable="checkProcessabilityWSRequest" part="parameters"></bpel:to>
                            </bpel:copy>
                            <bpel:copy>
                                <bpel:from variable="payload"></bpel:from>
                                <bpel:to part="parameters" variable="checkProcessabilityWSRequest">
                                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:requestInput/ns:payload]]></bpel:query>
                                </bpel:to>
                            </bpel:copy>
                            
                            
                        </bpel:assign><bpel:invoke name="CheckProcessabilityWS" partnerLink="HandleRequestWSPL" operation="checkProcessability" portType="ns:HandleRequestWS" inputVariable="checkProcessabilityWSRequest" outputVariable="checkProcessabilityWSResponse">
                            <bpel:catch faultName="ns:WsException" faultVariable="exception" faultMessageType="ns:WsException">
                                <bpel:sequence name="CreateExceptionTask"><bpel:assign validate="no" name="PrepareExceptionTask">
                                    <bpel:copy>
                                        <bpel:from><bpel:literal><impl:createExceptionTask xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <impl:requestInput>
    <impl:exceptionPoint>impl:exceptionPoint</impl:exceptionPoint>
    <impl:payload>impl:payload</impl:payload>
    <impl:triggerEvent>impl:triggerEvent</impl:triggerEvent>
  </impl:requestInput>
</impl:createExceptionTask>
</bpel:literal></bpel:from>
                                        <bpel:to variable="createExceptionTaskWSRequest" part="parameters"></bpel:to>
                                    </bpel:copy>
                                    <bpel:copy>
                                        <bpel:from variable="service"></bpel:from>
                                        <bpel:to part="parameters" variable="createExceptionTaskWSRequest">
                                            <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:requestInput/ns:triggerEvent]]></bpel:query>
                                        </bpel:to>
                                    </bpel:copy>
                                </bpel:assign>
                                <bpel:invoke name="InvokeCreateExceptionTask" partnerLink="HandleRequestWSPL" operation="createExceptionTask" portType="ns:HandleRequestWS" inputVariable="createExceptionTaskWSRequest" outputVariable="createExceptionTaskWSResponse"></bpel:invoke>
                                <bpel:throw name="StopProcess"></bpel:throw>
                            
                                </bpel:sequence>
                            </bpel:catch>
                        </bpel:invoke>
    
    

                    
                        <bpel:assign validate="no" name="AssignValid">
                            <bpel:copy>
                                <bpel:from part="parameters" variable="checkProcessabilityWSResponse">
                                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:checkProcessabilityReturn/ns:value]]></bpel:query>
                                </bpel:from>
                                <bpel:to variable="valid"></bpel:to>
                            </bpel:copy>
                        </bpel:assign>
                    </bpel:sequence>
                    <bpel:if name="IfValidComplex">
                        <bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[$valid='V']]></bpel:condition>
                        <bpel:sequence name="InvokeProcessRequest"><bpel:assign validate="no" name="PrepareProcessRequest">
                        
                    
                            
                            
                                <bpel:copy>
                                    <bpel:from><bpel:literal><impl:processRequest xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <impl:requestInput>
    <impl:payload>impl:payload</impl:payload>
  </impl:requestInput>
</impl:processRequest>
</bpel:literal></bpel:from>
                                    <bpel:to variable="handleRequestWSRequest" part="parameters"></bpel:to>
                                </bpel:copy>
                                <bpel:copy>
                                    <bpel:from variable="payload"></bpel:from>
                                    <bpel:to part="parameters" variable="handleRequestWSRequest">
                                        <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:requestInput/ns:payload]]></bpel:query>
                                    </bpel:to>
                                </bpel:copy>
                            </bpel:assign><bpel:invoke name="ProcessRequestWS" partnerLink="HandleRequestWSPL" operation="processRequest" portType="ns:HandleRequestWS" inputVariable="handleRequestWSRequest" outputVariable="handleRequestWSResponse">
                            <bpel:catch faultName="ns:WsException" faultVariable="exception" faultMessageType="ns:WsException">
                                <bpel:sequence name="CreateExceptionTask"><bpel:assign validate="no" name="PrepareExceptionTask">
                                            
                                            <bpel:copy>
                                        <bpel:from><bpel:literal><impl:createExceptionTask xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <impl:requestInput>
    <impl:exceptionPoint>impl:exceptionPoint</impl:exceptionPoint>
    <impl:payload>impl:payload</impl:payload>
    <impl:triggerEvent>impl:triggerEvent</impl:triggerEvent>
  </impl:requestInput>
</impl:createExceptionTask>
</bpel:literal></bpel:from>
                                        <bpel:to variable="createExceptionTaskWSRequest" part="parameters"></bpel:to>
                                    </bpel:copy>
                                    <bpel:copy>
                                        <bpel:from variable="service"></bpel:from>
                                        <bpel:to part="parameters" variable="createExceptionTaskWSRequest">
                                                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
                                                        <![CDATA[ns:requestInput/ns:triggerEvent]]>
                                                    </bpel:query>
                                                </bpel:to>
                                    </bpel:copy>
                                </bpel:assign>
                                <bpel:invoke name="InvokeCreateExceptionTask" partnerLink="HandleRequestWSPL" operation="createExceptionTask" portType="ns:HandleRequestWS" inputVariable="createExceptionTaskWSRequest" outputVariable="createExceptionTaskWSResponse"></bpel:invoke>
                                <bpel:throw name="StopProcess"></bpel:throw>
                            
                                </bpel:sequence>
                            </bpel:catch>
                        </bpel:invoke>
    
    

                    
                    
                        </bpel:sequence>
                        <bpel:else>
                            <bpel:sequence name="InvokeRejectRequest">
                        <bpel:assign validate="no" name="PrepareRejectReq">
                        
                    
                            
                            
                                    <bpel:copy>
                                        <bpel:from><bpel:literal><impl:rejectRequestWS xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <impl:requestInput>
    <impl:payload>impl:payload</impl:payload>
  </impl:requestInput>
</impl:rejectRequestWS>
</bpel:literal></bpel:from>
                                        <bpel:to variable="rejectRequestWSReq" part="parameters"></bpel:to>
                                    </bpel:copy>
                                    <bpel:copy>
                                        <bpel:from variable="payload"></bpel:from>
                                        <bpel:to part="parameters" variable="rejectRequestWSReq">
                                            <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:requestInput/ns:payload]]></bpel:query>
                                        </bpel:to>
                                    </bpel:copy>
                                </bpel:assign><bpel:invoke name="RejectRequestWS" partnerLink="HandleRequestWSPL" operation="rejectRequestWS" portType="ns:HandleRequestWS" inputVariable="rejectRequestWSReq" outputVariable="rejectRequestWSResp">
                            <bpel:catch faultName="ns:WsException" faultVariable="exception" faultMessageType="ns:WsException">
                                <bpel:sequence name="CreateExceptionTask"><bpel:assign validate="no" name="PrepareExceptionTask">
                                                <bpel:copy>
                                                    <bpel:from><bpel:literal><impl:createExceptionTask xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <impl:requestInput>
    <impl:exceptionPoint>impl:exceptionPoint</impl:exceptionPoint>
    <impl:payload>impl:payload</impl:payload>
    <impl:triggerEvent>impl:triggerEvent</impl:triggerEvent>
  </impl:requestInput>
</impl:createExceptionTask>
</bpel:literal></bpel:from>
                                                    <bpel:to variable="createExceptionTaskWSRequest" part="parameters"></bpel:to>
                                                </bpel:copy>
                                                
                                    <bpel:copy>
                                        <bpel:from variable="service"></bpel:from>
                                        <bpel:to part="parameters" variable="createExceptionTaskWSRequest">
                                                        <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
                                                            <![CDATA[ns:requestInput/ns:triggerEvent]]>
                                                        </bpel:query>
                                                    </bpel:to>
                                    </bpel:copy>
                                </bpel:assign>
                                <bpel:invoke name="InvokeCreateExceptionTask" partnerLink="HandleRequestWSPL" operation="createExceptionTask" portType="ns:HandleRequestWS" inputVariable="createExceptionTaskWSRequest" outputVariable="createExceptionTaskWSResponse"></bpel:invoke>
                                <bpel:throw name="StopProcess"></bpel:throw>
                            
                                </bpel:sequence>
                            </bpel:catch>
                        </bpel:invoke>
    
    

                    
                    </bpel:sequence>
                        </bpel:else>
                    </bpel:if>
                    <bpel:if name="NotReinjectHandleComplexRequest">
                        <bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[$reinject='N']]></bpel:condition>
                        <bpel:sequence name="Reply">
                            <bpel:assign validate="no" name="PrepareHandleComplexRequestReply">
                                <bpel:copy>
                                    <bpel:from><bpel:literal><tns:HandleComplexRequestResponse xmlns:tns="http://handerequest.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:result>tns:result</tns:result>
</tns:HandleComplexRequestResponse>
</bpel:literal></bpel:from>
                                    <bpel:to variable="handleComplexRequestOutput" part="parameters"></bpel:to>
                                </bpel:copy>
                                <bpel:copy>
                                    <bpel:from variable="ok"></bpel:from>
                                    <bpel:to part="parameters" variable="handleComplexRequestOutput">
                                        <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:result]]></bpel:query>
                                    </bpel:to>
                                </bpel:copy>
                            </bpel:assign>
                            <bpel:reply name="HandleComplexRequestReply" partnerLink="client" operation="handleComplexRequest" portType="tns:HandleRequest" variable="handleComplexRequestOutput"></bpel:reply>
                        </bpel:sequence>
                    </bpel:if>
                    
                </bpel:sequence>
            </bpel:elseif>

            <bpel:elseif>
                <bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[$service='rejectRequest']]></bpel:condition>
                <bpel:sequence name="RejectRequestSequence">
                    <bpel:sequence name="InvokeRejectRequest">
                        <bpel:assign validate="no" name="PrepareInvokeRejectRequest">
                        
                        <bpel:copy>
                            <bpel:from><bpel:literal><impl:rejectRequestWS xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <impl:requestInput>
    <impl:payload>impl:payload</impl:payload>
  </impl:requestInput>
</impl:rejectRequestWS>
</bpel:literal></bpel:from>
                            <bpel:to variable="rejectRequestWSReq" part="parameters"></bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                            <bpel:from variable="payload"></bpel:from>
                            <bpel:to part="parameters" variable="rejectRequestWSReq">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:requestInput/ns:payload]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                    </bpel:assign>
                        <bpel:invoke name="InvokeRejectRequestWS" partnerLink="HandleRequestWSPL" operation="rejectRequestWS" portType="ns:HandleRequestWS" inputVariable="rejectRequestWSReq" outputVariable="rejectRequestWSResp">
                            <bpel:catch faultName="ns:WsException" faultVariable="exception" faultMessageType="ns:WsException">
                                <bpel:sequence name="CreateExceptionTask"><bpel:assign validate="no" name="PrepareExceptionTask">
                                    <bpel:copy>
                                        <bpel:from><bpel:literal><impl:createExceptionTask xmlns:impl="http://request.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <impl:requestInput>
    <impl:exceptionPoint>impl:exceptionPoint</impl:exceptionPoint>
    <impl:payload>impl:payload</impl:payload>
    <impl:triggerEvent>impl:triggerEvent</impl:triggerEvent>
  </impl:requestInput>
</impl:createExceptionTask>
</bpel:literal></bpel:from>
                                        <bpel:to variable="createExceptionTaskWSRequest" part="parameters"></bpel:to>
                                    </bpel:copy>
                                    <bpel:copy>
                                        <bpel:from variable="service"></bpel:from>
                                        <bpel:to part="parameters" variable="createExceptionTaskWSRequest">
                                            <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:requestInput/ns:triggerEvent]]></bpel:query>
                                        </bpel:to>
                                    </bpel:copy>
                                </bpel:assign>
                                <bpel:invoke name="InvokeCreateExceptionTask" partnerLink="HandleRequestWSPL" operation="createExceptionTask" portType="ns:HandleRequestWS" inputVariable="createExceptionTaskWSRequest" outputVariable="createExceptionTaskWSResponse"></bpel:invoke>
                                <bpel:throw name="StopProcess"></bpel:throw>
                            
                                </bpel:sequence>
                            </bpel:catch>
                        </bpel:invoke>
                    </bpel:sequence>
                    
                    
                    <bpel:if name="NotReinjectRejectRequest">
                        <bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[$reinject='N']]></bpel:condition>
                        <bpel:sequence name="Reply">
                            <bpel:assign validate="no" name="PrepareRejectRequestReply">
                                <bpel:copy>
                                    <bpel:from><bpel:literal><tns:RejectRequestResponse xmlns:tns="http://handerequest.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:result>tns:result</tns:result>
</tns:RejectRequestResponse>
</bpel:literal></bpel:from>
                                    <bpel:to variable="rejectRequestOutput" part="parameters"></bpel:to>
                                </bpel:copy>
                                <bpel:copy>
                                    <bpel:from variable="ok"></bpel:from>
                                    <bpel:to part="parameters" variable="rejectRequestOutput">
                                        <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:result]]></bpel:query>
                                    </bpel:to>
                                </bpel:copy>
                            </bpel:assign>
                            <bpel:reply name="RejectRequestReply" partnerLink="client" operation="rejectRequest" portType="tns:HandleRequest" variable="rejectRequestOutput"></bpel:reply>
                        </bpel:sequence>
                    </bpel:if>
                </bpel:sequence>
            </bpel:elseif><bpel:else>
                <bpel:assign validate="no" name="UnknownRequest">
                    <bpel:copy>
                        <bpel:from>
                            <bpel:literal xml:space="preserve">Error</bpel:literal>
                        </bpel:from>
                        <bpel:to variable="ok"></bpel:to>
                    </bpel:copy>
                    
                </bpel:assign>
            </bpel:else></bpel:if>
        <bpel:if name="IfReinject">
            <bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[$reinject='Y']]></bpel:condition>
            <bpel:sequence name="ReplyReinject">
                <bpel:assign validate="no" name="PrepareReinjectRequestReply"><bpel:copy>
                <bpel:from><bpel:literal><tns:ReinjectRequestResponse xmlns:tns="http://handerequest.ws.ou" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:result>tns:result</tns:result>
</tns:ReinjectRequestResponse>
</bpel:literal></bpel:from>
                <bpel:to variable="reinjectRequestOutput" part="parameters"></bpel:to>
            </bpel:copy>
            <bpel:copy>
                <bpel:from variable="ok"></bpel:from>
                <bpel:to part="parameters" variable="reinjectRequestOutput">
                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
                        <![CDATA[tns:result]]>
                    </bpel:query>
                </bpel:to>
            </bpel:copy>
        
            </bpel:assign>
                <bpel:reply name="ReinjectRequestReply" partnerLink="client" operation="reinjectRequest" portType="tns:HandleRequest" variable="reinjectRequestOutput"></bpel:reply>
            </bpel:sequence>
        </bpel:if>
        
        
    </bpel:sequence>
</bpel:process>

