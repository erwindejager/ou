operation trimNs(s : String) : String {
	var result = s;
	if (result.contains(":")) {
		result = s.split(":").last();
	}
	return result;
}

operation transformChildren_m(sb : Any, context : Map, e : Any) : Sequence{
	var path : Sequence;
	for (c in e.children) {
 		c.transform_(sb, path, context);
	}
	return path;
}

operation transformChildren_qqq(sb : Any, context : Map, e : Any) : String{
	var path : Sequence;
	for (c in e.children) {
 		c.transform_(sb, path, context);
	}
	return formatRule(path);
}

operation formatRule(seq : Sequence) : String{
	var path : String = "";
	var sep : String = "";
	for (elem in seq) {
		if (path.length > 0) {
			sep = ", ";
		}
		if (elem.startsWith("\"")) {
			path = path + sep + "[" + elem + "]";
		} else {
			path = path + sep + elem;
		}
	}
	return path + ".";
}

operation hasChild(e : Any, cn : String) : Boolean {
	var result = false;
	for (c in e.children) {
		if (cn.equals(trimNs(c.tagName))) {
			result = true;
		} else {
	 		result = hasChild(c, cn);
		}
 		if (result) {
 			return result;
 		}
	}
	return result;
}
