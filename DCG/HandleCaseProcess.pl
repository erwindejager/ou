%% Automatically generated by EDJ BPEL2DCG Transformer : Sun Dec 09 19:37:57 CET 2018


grammar_HandleCaseProcess --> ["v0"], c_main, ["v"].


c_onm_handleCase --> ["handleCase"], ["InitHandleCase"].

c_onm_handleParkedCase --> ["handleParkedCase"], ["InitHandleParkedCase"].

c_onm_stopCase --> ["stopCase"], ["InitStopCase"].

c_onm_handleObjection --> ["handleObjection"], ["InitHandleObjection"].

c_onm_reinjectCase --> ["reinjectCase"], ["InitReinjectCase"].

c_pick_HandleRequest --> ["HandleRequest"], c_onm_handleCase.

c_pick_HandleRequest --> ["HandleRequest"], c_onm_handleParkedCase.

c_pick_HandleRequest --> ["HandleRequest"], c_onm_stopCase.

c_pick_HandleRequest --> ["HandleRequest"], c_onm_handleObjection.

c_pick_HandleRequest --> ["HandleRequest"], c_onm_reinjectCase.

c_catch_InvokeRegisterCase --> [].

c_catch_InvokeRegisterCase --> ["PrepareRollback"], ["StopProcess"], ["@END@"].

c_catch_InvokeCreateCase --> [].

c_catch_InvokeCreateCase --> ["PrepareExceptionTask"], ["InvokeCreateExceptionTask"], ["StopProcess"], ["@END@"].

c_catch_InvokeValidateCase --> [].

c_catch_InvokeValidateCase --> ["PrepareExceptionTask"], ["InvokeCreateExceptionTask"], ["StopProcess"], ["@END@"].

c_catch_InvokeParkCase --> [].

c_catch_InvokeParkCase --> ["PrepareExceptionTask"], ["InvokeCreateExceptionTask"], ["StopProcess"], ["@END@"].


c_if_IfNotReinjectedCase --> [].

c_if_IfNotReinjectedCase --> ["IfNotReinjectedCase"], ["PrepareReplyHandleCase"], ["ReplyHandleCase"], ["@END@"].

c_catch_InvokeGetCalculation --> [].

c_catch_InvokeGetCalculation --> ["PrepareExceptionTask"], ["InvokeCreateExceptionTask"], ["StopProcess"], ["@END@"].

c_catch_InvokeCheckProcessability --> [].

c_catch_InvokeCheckProcessability --> ["PrepareExceptionTask"], ["InvokeCreateExceptionTask"], ["StopProcess"], ["@END@"].


c_if_IfDegree --> [].

c_catch_InvokeCreatePayment --> [].

c_catch_InvokeCreatePayment --> ["PrepareExceptionTask"], ["InvokeCreateExceptionTask"], ["StopProcess"], ["@END@"].

c_if_IfDegree --> ["IfDegree"], ["PrepareInvokeCreatePayment"], ["InvokeCreatePayment"], c_catch_InvokeCreatePayment.

c_catch_InvokeSendLetter --> [].

c_catch_InvokeSendLetter --> ["PrepareExceptionTask"], ["InvokeCreateExceptionTask"], ["StopProcess"], ["@END@"].

c_catch_InvokeEndCase --> [].

c_catch_InvokeEndCase --> ["PrepareExceptionTask"], ["InvokeCreateExceptionTask"], ["StopProcess"], ["@END@"].


c_if_IfNotReinjectedParkedCase --> [].

c_if_IfNotReinjectedParkedCase --> ["IfNotReinjectedParkedCase"], ["PrepareReplyHandleParkedCase"], ["ReplyHandleParkedCase"], ["@END@"].

c_if_HandleReceivedCaseRequest --> ["elseif"], ["PrepareInvokeGetCalculation"], ["InvokeGetCalculation"], c_catch_InvokeGetCalculation, ["PrepareInvokeCheckProcessability"], ["InvokeCheckProcessability"], c_catch_InvokeCheckProcessability, c_if_IfDegree, ["PrepareInvokeSendLetter"], ["InvokeSendLetter"], c_catch_InvokeSendLetter, ["PrepareInvokeEndCase"], ["InvokeEndCase"], c_catch_InvokeEndCase, c_if_IfNotReinjectedParkedCase.

c_catch_InvokeStopCase --> [].

c_catch_InvokeStopCase --> ["PrepareExceptionTask"], ["InvokeCreateExceptionTask"], ["StopProcess"], ["@END@"].


c_if_IfNotReinjectedStopCase --> [].

c_if_IfNotReinjectedStopCase --> ["IfNotReinjectedStopCase"], ["PrepareReplyStopCase"], ["ReplyStopCase"], ["@END@"].

c_if_HandleReceivedCaseRequest --> ["elseif"], ["PrepareInvokeStopCase"], ["InvokeStopCase"], c_catch_InvokeStopCase, c_if_IfNotReinjectedStopCase.

c_catch_InvokeRegisterObjectionCase --> [].

c_catch_InvokeRegisterObjectionCase --> ["PrepareRollback"], ["StopProcess"], ["@END@"].

c_catch_InvokeCreateObjectionCase --> [].

c_catch_InvokeCreateObjectionCase --> ["PrepareExceptionTask"], ["InvokeCreateExceptionTask"], ["StopProcess"], ["@END@"].

c_catch_InvokeValidateObjectionCase --> [].

c_catch_InvokeValidateObjectionCase --> ["PrepareExceptionTask"], ["InvokeCreateExceptionTask"], ["StopProcess"], ["@END@"].

c_catch_InvokeCreateObjectionTask --> [].

c_catch_InvokeCreateObjectionTask --> ["PrepareExceptionTask"], ["InvokeCreateExceptionTask"], ["StopProcess"], ["@END@"].

c_catch_InvokeStopObjectionCase --> [].

c_catch_InvokeStopObjectionCase --> ["PrepareExceptionTask"], ["InvokeCreateExceptionTask"], ["StopProcess"], ["@END@"].

c_if_IfNewObjection --> ["else"], ["PrepareInvokeStopObjectionCase"], ["InvokeStopObjectionCase"], c_catch_InvokeStopObjectionCase.

c_if_IfNewObjection --> ["IfNewObjection"], ["PrepareCreateObjectionTask"], ["InvokeCreateObjectionTask"], c_catch_InvokeCreateObjectionTask.


c_if_IfNotReinjectedObjectionCase --> [].

c_if_IfNotReinjectedObjectionCase --> ["IfNotReinjectedObjectionCase"], ["PrepareReplyHandleObjection"], ["ReplyHandleObjection"], ["@END@"].

c_if_HandleReceivedCaseRequest --> ["elseif"], ["PrepareRegisterObjectionCase"], ["InvokeRegisterObjectionCase"], c_catch_InvokeRegisterObjectionCase, ["SaveObjectionTicket"], ["PrepareCreateObjectionCase"], ["InvokeCreateObjectionCase"], c_catch_InvokeCreateObjectionCase, ["PrepareInvokeValidateObjectionCase"], ["InvokeValidateObjectionCase"], c_catch_InvokeValidateObjectionCase, c_if_IfNewObjection, c_if_IfNotReinjectedObjectionCase.

c_if_HandleReceivedCaseRequest --> ["HandleReceivedCaseRequest"], ["PrepareInvokeRegisterCase"], ["InvokeRegisterCase"], c_catch_InvokeRegisterCase, ["SaveTicket"], ["PrepareInvokeCreateCase"], ["InvokeCreateCase"], c_catch_InvokeCreateCase, ["PrepareInvokeValidateCase"], ["InvokeValidateCase"], c_catch_InvokeValidateCase, ["PrepareInvokeParkCase"], ["InvokeParkCase"], c_catch_InvokeParkCase, c_if_IfNotReinjectedCase.


c_if_Reinjected --> [].

c_if_Reinjected --> ["Reinjected"], ["PrepareReplyReinjectCase"], ["ReplyReinjectCase"], ["@END@"].

c_main --> c_pick_HandleRequest, c_if_HandleReceivedCaseRequest, c_if_Reinjected.

stripRule(_, [], []). 
stripRule(T, [T|_], ["v"]). 
stripRule(T, [X|L], [X|NL]) :- stripRule(T, L, NL). 

stripRules([],[]).
stripRules([X|L],[X1|L1]) :- stripRule("@END@", X, X1), stripRules(L, L1).

start:-
    open('HandleCaseProcess.txt',write,OS),
	findall(X, phrase(grammar_HandleCaseProcess,X,[]),AS),
	stripRules(AS,AS1),
	list_to_set(AS1, AsSet),
    forall((member(N,AsSet)), writeln(OS,N)),
    close(OS).

 